rule("INITIALIze global CONSTANTS")
{
    event
    {
        Ongoing - Global;
    }

    actions
    {
        Set Global Variable(A, Empty Array);
        Modify Global Variable(A, Append To Array, Vector(-40.000, 0, 145.500));
        Modify Global Variable(A, Append To Array, Vector(-29.000, 8, 56));
        Modify Global Variable(A, Append To Array, Vector(-77.500, 1.500, 65.500));
        Set Global Variable(B, Empty Array);
        Modify Global Variable(B, Append To Array, Vector(-31.500, 0, 148));
        Modify Global Variable(B, Append To Array, Vector(-22.500, 7.500, 66.500));
        Modify Global Variable(B, Append To Array, Vector(-82.500, 1.500, 61));
        Set Global Variable(C, Empty Array);
        Modify Global Variable(C, Append To Array, 600);
        Modify Global Variable(C, Append To Array, 300);
        Modify Global Variable(C, Append To Array, 400);
        Set Global Variable(D, Empty Array);
        Modify Global Variable(D, Append To Array, Hero(Roadhog));
        Modify Global Variable(D, Append To Array, Hero(Soldier: 76));
        Modify Global Variable(D, Append To Array, Hero(Mei));
        Set Global Variable(E, Empty Array);
        Modify Global Variable(E, Append To Array, Vector(-50.000, 1, 137.350));
        Modify Global Variable(E, Append To Array, Vector(-7.000, 3, 75));
        Modify Global Variable(E, Append To Array, Vector(-37.000, 6.500, 48));
        Modify Global Variable(E, Append To Array, Vector(-55.000, 1.500, 141.500));
        Modify Global Variable(E, Append To Array, Vector(-25.500, 7.500, 50.500));
        Set Global Variable(F, Vector(2.500, 3.500, 75));
        Set Global Variable(G, Empty Array);
        Modify Global Variable(G, Append To Array, Vector(-29.000, -2.000, 56));
    }
}

rule("initialize player variables")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    actions
    {
        Set Player Variable(Event Player, A, 0);
        Set Player Variable(Event Player, B, 1);
        Set Damage Dealt(Event Player, Player Variable(Event Player, B));
        Set Player Variable(Event Player, C, 1);
        Set Player Variable(Event Player, D, 1);
        Set Player Variable(Event Player, E, 2);
        Set Player Variable(Event Player, F, 0);
        Set Player Variable(Event Player, H, 15);
        Set Player Variable(Event Player, I, 5);
        Set Player Variable(Event Player, J, 1);
        Set Player Variable(Event Player, K, 10);
        Set Player Variable(Event Player, L, 0);
        Set Player Variable(Event Player, M, False);
        Set Player Variable(Event Player, N, 0);
        Set Player Variable(Event Player, O, 0);
        Set Player Variable(Event Player, P, 1000);
        Set Player Variable(Event Player, Q, 25);
        Set Player Variable(Event Player, R, 100);
        Set Player Variable(Event Player, S, 1);
    }
}

rule("Initialize HUDs")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    actions
    {
        Create HUD Text(Event Player, String("{0}: {1}", String("Money", Null, Null, Null), Player Variable(Event Player, A), Null), Null,
            Null, Top, 0, White, White, White, Visible To and String);
        Create HUD Text(Event Player, Null, String("{0} / {1}", String("{0}: {1}", String("Damage", Null, Null, Null), String("{0}%",
            Player Variable(Event Player, B), Null, Null), Null), String("{0}: {1}", String("Defend", Null, Null, Null), String("{0}%",
            Player Variable(Event Player, R), Null, Null), Null), Null), Null, Top, 1, White, Red, White, Visible To and String);
        Create HUD Text(Event Player, Null, String("{0} sec", Player Variable(Event Player, E), Null, Null), Null, Top, 2, White, Yellow,
            White, Visible To and String);
        Create HUD Text(Event Player, Null, String("{0} {1}", String("{0}%", Multiply(Player Variable(Event Player, J), 100), Null, Null),
            String("Money", Null, Null, Null), Null), Null, Top, 3, White, Green, White, Visible To and String);
        Create HUD Text(Event Player, Null, String("{0} {1} {2}", Player Variable(Event Player, N), String("Credits", Null, Null, Null),
            String("({0})", String("{0} {1}", String("Boss", Null, Null, Null), String("{0}: {1}", String("Kills", Null, Null, Null),
            Player Variable(Event Player, L), Null), Null), Null, Null)), Null, Top, 4, White, Purple, White, Visible To and String);
        Create HUD Text(Event Player, String("{0}: {1}", String("Found", Null, Null, Null), Position Of(Event Player), Null), Null, Null,
            Left, 0, White, White, White, Visible To and String);
        Create HUD Text(Event Player, String("{0}: {1}", String("In View", Null, Null, Null), Horizontal Facing Angle Of(Event Player),
            Null), Null, Null, Left, 0, White, White, White, Visible To and String);
        Create HUD Text(Event Player, String("{0}: {1}", String("Rounds", Null, Null, Null), String("{0} - {1}", Player Variable(
            Event Player, C), String("{0} sec", Player Variable(Event Player, E), Null, Null), Null), Null), Null, Null, Left, 0, White,
            White, White, Visible To and String);
        Create In-World Text(All Players(Team 1), String("{0} - {1} - {2}", String("{0}: {1}", String("Damage", Null, Null, Null), String(
            "{0}%", Player Variable(Event Player, B), Null, Null), Null), String("{0} sec", Player Variable(Event Player, E), Null, Null),
            String("{0} {1}", String("{0}%", Multiply(Player Variable(Event Player, J), 100), Null, Null), String("Money", Null, Null,
            Null), Null)), Event Player, 0.750, Clip Against Surfaces, Visible To Position and String);
    }
}

rule("initialize portals/shop")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    actions
    {
        Create Effect(All Players(Team 1), Good Aura, Purple, Value In Array(Global Variable(E), 0), 1.500,
            Visible To Position and Radius);
        Create In-World Text(All Players(Team 1), String("Upgrades", Null, Null, Null), Add(Value In Array(Global Variable(E), 0), Vector(
            0, 1, 0)), 1.500, Clip Against Surfaces, Visible To Position and String);
        Create Effect(All Players(Team 1), Good Aura, Blue, Value In Array(Global Variable(E), 3), 1.500, Visible To Position and Radius);
        Create In-World Text(All Players(Team 1), String("{0} {1} {2}", String("Next", Null, Null, Null), String("Boss", Null, Null, Null),
            String("({0})", String("{0}: {1}", String("Price", Null, Null, Null), 1000, Null), Null, Null)), Add(Value In Array(
            Global Variable(E), 3), Vector(0, 1, 0)), 1.500, Clip Against Surfaces, Visible To Position and String);
        Create Effect(All Players(Team 1), Good Aura, Red, Value In Array(Global Variable(E), 1), 1.500, Visible To Position and Radius);
        Create In-World Text(All Players(Team 1), String("Backward", Null, Null, Null), Add(Value In Array(Global Variable(E), 1), Vector(
            0, 1, 0)), 1.500, Clip Against Surfaces, Visible To Position and String);
        Create Effect(All Players(Team 1), Sphere, Blue, Global Variable(F), 12, Visible To Position and Radius);
        Create Effect(All Players(Team 1), Good Aura, Yellow, Value In Array(Global Variable(E), 2), 1.500,
            Visible To Position and Radius);
        Create In-World Text(All Players(Team 1), String("Upgrades", Null, Null, Null), Add(Value In Array(Global Variable(E), 2), Vector(
            0, 1, 0)), 1.500, Clip Against Surfaces, Visible To Position and String);
        Create Effect(All Players(Team 1), Light Shaft, Red, Value In Array(Global Variable(G), 0), 17, Visible To Position and Radius);
        Create Icon(All Players(Team 1), Vector(-38.000, 1.250, 141.500), Arrow: Left, None, White, False);
        Create In-World Text(All Players(Team 1), String("{0} {1}", String("Buy", Null, Null, Null), String("Upgrades", Null, Null, Null),
            Null), Vector(-38.000, 1, 141.500), 1.500, Clip Against Surfaces, String);
        Create Effect(All Players(Team 1), Good Aura, Blue, Value In Array(Global Variable(E), 4), 1.500, Visible To Position and Radius);
        Create In-World Text(All Players(Team 1), String("{0} {1} {2}", String("Next", Null, Null, Null), String("Boss", Null, Null, Null),
            String("({0})", String("{0}: {1}", String("Price", Null, Null, Null), String("{0} {1}", 12, 500, Null), Null), Null, Null)),
            Add(Value In Array(Global Variable(E), 4), Vector(0, 1, 0)), 1.500, Clip Against Surfaces, Visible To Position and String);
        Create Effect(All Players(Team 1), Light Shaft, Red, Subtract(Value In Array(Global Variable(A), 2), Vector(0, 3, 0)), 8,
            Visible To Position and Radius);
    }
}

rule("initialize upgrades")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    actions
    {
        Create Effect(All Players(Team 1), Orb, Purple, Subtract(Global Variable(F), Vector(0, 0.500, 8.500)), 3,
            Visible To Position and Radius);
        Create In-World Text(Event Player, String("{0} {1}", String("Upgrade", Null, Null, Null), String("{0} {1}", String("Faster", Null,
            Null, Null), String("({0})", String("{0}: {1}", String("Price", Null, Null, Null), Player Variable(Event Player, H), Null),
            Null, Null), Null), Null), Subtract(Global Variable(F), Vector(0, 0, 8.500)), 1.500, Clip Against Surfaces,
            Visible To Position and String);
        Create Effect(All Players(Team 1), Orb, Red, Subtract(Global Variable(F), Vector(2.500, 0.500, 8.500)), 3,
            Visible To Position and Radius);
        Create In-World Text(Event Player, String("{0} {1}", String("Upgrade", Null, Null, Null), String("{0} {1}", String("Damage", Null,
            Null, Null), String("({0})", String("{0}: {1}", String("Price", Null, Null, Null), Player Variable(Event Player, I), Null),
            Null, Null), Null), Null), Subtract(Global Variable(F), Vector(2.500, 0, 8.500)), 1.500, Clip Against Surfaces,
            Visible To Position and String);
        Create Effect(All Players(Team 1), Orb, Green, Subtract(Global Variable(F), Vector(-2.500, 0.500, 8.500)), 3,
            Visible To Position and Radius);
        Create In-World Text(Event Player, String("{0} {1}", String("Upgrade", Null, Null, Null), String("{0} {1}", String("Money", Null,
            Null, Null), String("({0})", String("{0}: {1}", String("Price", Null, Null, Null), Player Variable(Event Player, K), Null),
            Null, Null), Null), Null), Subtract(Global Variable(F), Vector(-2.500, 0, 8.500)), 1.500, Clip Against Surfaces,
            Visible To Position and String);
        Create Effect(All Players(Team 1), Orb, Yellow, Subtract(Global Variable(F), Vector(5, 0.500, 6.500)), 3,
            Visible To Position and Radius);
        Create In-World Text(Event Player, String("{0} {1}", String("Upgrade", Null, Null, Null), String("{0} {1}", String("Healed", Null,
            Null, Null), String("({0})", String("{0}: {1}", String("Price", Null, Null, Null), Player Variable(Event Player, P), Null),
            Null, Null), Null), Null), Subtract(Global Variable(F), Vector(5, 0, 6.500)), 1.500, Clip Against Surfaces,
            Visible To Position and String);
        Create Effect(All Players(Team 1), Orb, Blue, Subtract(Global Variable(F), Vector(-5.000, 0.500, 6.500)), 3,
            Visible To Position and Radius);
        Create In-World Text(Event Player, String("{0} {1}", String("Upgrade", Null, Null, Null), String("{0} {1}", String("Defend", Null,
            Null, Null), String("({0})", String("{0}: {1}", String("Price", Null, Null, Null), Player Variable(Event Player, Q), Null),
            Null, Null), Null), Null), Subtract(Global Variable(F), Vector(-5.000, 0, 6.500)), 1.500, Clip Against Surfaces,
            Visible To Position and String);
        Create In-World Text(All Players(All Teams), String("{0} {1} {2}", String("Buy", Null, Null, Null), String("Items", Null, Null,
            Null), String("({0})", String("Rank F", Null, Null, Null), Null, Null)), Subtract(Global Variable(F), Vector(0, -0.500,
            8.500)), 2.500, Clip Against Surfaces, Visible To Position and String);
    }
}

rule("initialize enemies")
{
    event
    {
        Ongoing - Each Player;
        Team 2;
        All;
    }

    conditions
    {
        Is True For All(All Players(Team 2), Has Spawned(Current Array Element)) == True;
        Number of Players(Team 2) == 6;
    }

    actions
    {
        Start Forcing Throttle(Event Player, 0, 0, 0, 0, 0, 0);
        Teleport(Event Player, Value In Array(Global Variable(B), Index Of Array Value(Global Variable(D), Hero Of(Event Player))));
        Disallow Button(Event Player, Jump);
        Disallow Button(Event Player, Crouch);
        Create In-World Text(All Players(All Teams), String("{0}: {1}", String("Heal", Null, Null, Null), Value In Array(Global Variable(
            C), Index Of Array Value(Global Variable(D), Hero Of(Event Player))), Null), Event Player, 1, Clip Against Surfaces,
            Visible To Position and String);
    }
}

rule("teleport to first boss")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Has Spawned(Event Player) == True;
        True == True;
    }

    actions
    {
        Set Max Health(Event Player, Player Variable(Event Player, S));
        Teleport(Event Player, Value In Array(Global Variable(A), 0));
    }
}

rule("RESPAWN ENEMIES")
{
    event
    {
        Player Died;
        Team 2;
        All;
    }

    actions
    {
        Respawn(Event Player);
        Wait(0.250, Ignore Condition);
        Teleport(Event Player, Value In Array(Global Variable(B), Index Of Array Value(Global Variable(D), Hero Of(Event Player))));
    }
}

rule("shooting control")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Is Firing Primary(Event Player) == True;
        Compare(Player Variable(Event Player, C), >, 0) == True;
    }

    actions
    {
        Disallow Button(Event Player, Primary Fire);
        Modify Player Variable(Event Player, C, Subtract, 1);
        Skip If(Compare(Player Variable(Event Player, C), ==, 0), 1);
        Allow Button(Event Player, Primary Fire);
    }
}

rule("Shooting reload")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Player Variable(Event Player, C) < Player Variable(Event Player, D);
    }

    actions
    {
        Wait(Player Variable(Event Player, E), Ignore Condition);
        Modify Player Variable(Event Player, C, Add, 1);
        Allow Button(Event Player, Primary Fire);
    }
}

rule("ADD COIN from boss")
{
    event
    {
        Player took damage;
        Team 2;
        All;
    }

    actions
    {
        Set Player Variable(Attacker, Z, Max(Subtract(Value In Array(Global Variable(C), Index Of Array Value(Global Variable(D), Hero Of(
            Event Player))), Health(Event Player)), 0));
        Modify Player Variable(Attacker, A, Add, Round To Integer(Multiply(Player Variable(Attacker, J), Raise To Power(Player Variable(
            Attacker, Z), Add(1, Divide(Player Variable(Attacker, L), 2)))), Up));
        Set Global Variable At Index(C, Index Of Array Value(Global Variable(D), Hero Of(Event Player)), Health(Event Player));
    }
}

rule("boss death reward")
{
    event
    {
        Player Died;
        Team 2;
        All;
    }

    actions
    {
        Set Player Variable(Attacker, L, Max(Player Variable(Attacker, L), Add(Index Of Array Value(Global Variable(D), Hero Of(
            Event Player)), 1)));
        Modify Player Variable(Attacker, A, Add, Raise To Power(100, Add(0.500, Divide(Player Variable(Event Player, L), 2))));
        Skip If(Compare(Player Variable(Event Player, L), <, 5), 2);
        Big Message(Event Player, String("{0} - {1}", String("{0} {1}", String("Start", Null, Null, Null), String("Over", Null, Null,
            Null), Null), String("{0} {1} {2}", String("Buy", Null, Null, Null), String("More", Null, Null, Null), String("Heroes", Null,
            Null, Null)), Null));
        Set Player Variable(Event Player, M, True);
    }
}

rule("player death")
{
    event
    {
        Player Died;
        Team 1;
        All;
    }

    actions
    {
        Respawn(Event Player);
        Set Player Variable(Event Player, F, 6);
        Wait(0.250, Ignore Condition);
        Teleport(Event Player, Global Variable(F));
    }
}

rule("portal (BOss 1 >> SHOP)")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Array Contains(Players Within Radius(Value In Array(Global Variable(E), 0), 1.500, Team 1, Surfaces), Event Player) == True;
    }

    actions
    {
        Teleport(Event Player, Global Variable(F));
        Set Player Variable(Event Player, F, 6);
        Set Player Variable(Event Player, G, Value In Array(Global Variable(A), 0));
    }
}

rule("portal (BOss 1 >> boss 2)")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Array Contains(Players Within Radius(Value In Array(Global Variable(E), 3), 2, Team 1, Surfaces), Event Player) == True;
    }

    actions
    {
        Skip If(Compare(Player Variable(Event Player, L), >=, 1), 2);
        Big Message(Event Player, String("{0} {1} {2}", String("Go", Null, Null, Null), String("Kill", Null, Null, Null), String("Boss",
            Null, Null, Null)));
        Abort;
        Skip If(Compare(Player Variable(Event Player, A), >=, 1000), 2);
        Big Message(Event Player, String("{0} {1} {2}", String("Go", Null, Null, Null), String("Find", Null, Null, Null), String("{0} {1}",
            String("More", Null, Null, Null), String("Money", Null, Null, Null), Null)));
        Abort;
        Modify Player Variable(Event Player, A, Subtract, 1000);
        Teleport(Event Player, Value In Array(Global Variable(A), 1));
        Set Player Variable(Event Player, F, 1);
        Set Player Variable(Event Player, G, Value In Array(Global Variable(A), 1));
        Set Player Variable(Event Player, O, 1);
    }
}

rule("portal (BOss 2 >> SHOP)")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Array Contains(Players Within Radius(Value In Array(Global Variable(E), 2), 1.500, Team 1, Surfaces), Event Player) == True;
    }

    actions
    {
        Teleport(Event Player, Global Variable(F));
        Set Player Variable(Event Player, F, 6);
        Set Player Variable(Event Player, G, Value In Array(Global Variable(A), 1));
    }
}

rule("portal (BOss 2 >> boss 3)")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Array Contains(Players Within Radius(Value In Array(Global Variable(E), 4), 2, Team 1, Surfaces), Event Player) == True;
    }

    actions
    {
        Skip If(Compare(Player Variable(Event Player, L), >=, 2), 2);
        Big Message(Event Player, String("{0} {1} {2}", String("Go", Null, Null, Null), String("Kill", Null, Null, Null), String("Boss",
            Null, Null, Null)));
        Abort;
        Skip If(Compare(Player Variable(Event Player, A), >=, Add(10000, 2500)), 2);
        Big Message(Event Player, String("{0} {1} {2}", String("Go", Null, Null, Null), String("Find", Null, Null, Null), String("{0} {1}",
            String("More", Null, Null, Null), String("Money", Null, Null, Null), Null)));
        Abort;
        Modify Player Variable(Event Player, A, Subtract, Add(10000, 2500));
        Teleport(Event Player, Value In Array(Global Variable(A), 2));
        Set Player Variable(Event Player, F, 2);
        Set Player Variable(Event Player, G, Value In Array(Global Variable(A), 2));
        Set Player Variable(Event Player, O, 2);
    }
}

rule("POrtal (shop >> last_boss)")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Array Contains(Players Within Radius(Value In Array(Global Variable(E), 1), 1.500, Team 1, Surfaces), Event Player) == True;
    }

    actions
    {
        Set Player Variable(Event Player, F, Player Variable(Event Player, L));
        Teleport(Event Player, Player Variable(Event Player, G));
    }
}

rule("shop border")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Player Variable(Event Player, F) == 6;
        Array Contains(Players Within Radius(Global Variable(F), 12, Team 1, Off), Event Player) == False;
    }

    actions
    {
        Teleport(Event Player, Global Variable(F));
    }
}

rule("boss 2 border")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        And(Compare(Y Component Of(Position Of(Event Player)), >, 3.500), Array Contains(Players Within Radius(Value In Array(
            Global Variable(G), 0), 17, Team 1, Off), Event Player)) == False;
        Compare(Player Variable(Event Player, F), ==, 1) == True;
        Compare(Player Variable(Event Player, O), ==, 1) == True;
    }

    actions
    {
        Teleport(Event Player, Add(Value In Array(Global Variable(G), 0), Vector(0, 8, 0)));
    }
}

rule("boss 3 border")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Compare(Player Variable(Event Player, F), ==, 2) == True;
        Compare(Player Variable(Event Player, O), ==, 2) == True;
        Array Contains(Players Within Radius(Value In Array(Global Variable(A), 2), 8, Team 1, Off), Event Player) == False;
    }

    actions
    {
        Teleport(Event Player, Value In Array(Global Variable(A), 2));
    }
}

rule("buy reload speed")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Array Contains(Players Within Radius(Subtract(Global Variable(F), Vector(0, 0.500, 8.500)), 2, Team 1, Off), Event Player) == True;
        Is Button Held(Event Player, Interact) == True;
    }

    actions
    {
        Skip If(Compare(Player Variable(Event Player, A), >=, Player Variable(Event Player, H)), 2);
        Big Message(Event Player, String("{0} {1} {2}", String("Go", Null, Null, Null), String("Find", Null, Null, Null), String("{0} {1}",
            String("More", Null, Null, Null), String("Money", Null, Null, Null), Null)));
        Abort;
        Modify Player Variable(Event Player, A, Subtract, Player Variable(Event Player, H));
        Modify Player Variable(Event Player, E, Multiply, 0.900);
        Set Player Variable(Event Player, H, Round To Integer(Raise To Power(Player Variable(Event Player, H), 1.060), Up));
    }
}

rule("buy damage")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Array Contains(Players Within Radius(Subtract(Global Variable(F), Vector(2.500, 0.500, 8.500)), 2, Team 1, Off), Event Player)
            == True;
        Is Button Held(Event Player, Interact) == True;
    }

    actions
    {
        Skip If(Compare(Player Variable(Event Player, A), >=, Player Variable(Event Player, I)), 2);
        Big Message(Event Player, String("{0} {1} {2}", String("Go", Null, Null, Null), String("Find", Null, Null, Null), String("{0} {1}",
            String("More", Null, Null, Null), String("Money", Null, Null, Null), Null)));
        Abort;
        Modify Player Variable(Event Player, A, Subtract, Player Variable(Event Player, I));
        Skip If(Compare(Player Variable(Event Player, B), <, 75), 1);
        Modify Player Variable(Event Player, B, Add, 2);
        Skip If(Compare(Player Variable(Event Player, B), >=, 75), 1);
        Modify Player Variable(Event Player, B, Add, 3);
        Set Damage Dealt(Event Player, Player Variable(Event Player, B));
        Set Player Variable(Event Player, I, Round To Integer(Raise To Power(Player Variable(Event Player, I), 1.010), Up));
    }
}

rule("buy money")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Array Contains(Players Within Radius(Subtract(Global Variable(F), Vector(-2.500, 0.500, 8.500)), 2, Team 1, Off), Event Player)
            == True;
        Is Button Held(Event Player, Interact) == True;
    }

    actions
    {
        Skip If(Compare(Player Variable(Event Player, A), >=, Player Variable(Event Player, K)), 2);
        Big Message(Event Player, String("{0} {1} {2}", String("Go", Null, Null, Null), String("Find", Null, Null, Null), String("{0} {1}",
            String("More", Null, Null, Null), String("Money", Null, Null, Null), Null)));
        Abort;
        Modify Player Variable(Event Player, A, Subtract, Player Variable(Event Player, K));
        Modify Player Variable(Event Player, J, Add, 0.050);
        Set Player Variable(Event Player, K, Round To Integer(Raise To Power(Player Variable(Event Player, K), 1.080), Up));
    }
}

rule("buy health")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Array Contains(Players Within Radius(Subtract(Global Variable(F), Vector(5, 0.500, 6.500)), 2, Team 1, Off), Event Player) == True;
        Is Button Held(Event Player, Interact) == True;
    }

    actions
    {
        Skip If(Compare(Player Variable(Event Player, A), >=, Player Variable(Event Player, P)), 2);
        Big Message(Event Player, String("{0} {1} {2}", String("Go", Null, Null, Null), String("Find", Null, Null, Null), String("{0} {1}",
            String("More", Null, Null, Null), String("Money", Null, Null, Null), Null)));
        Abort;
        Modify Player Variable(Event Player, A, Subtract, Player Variable(Event Player, P));
        Modify Player Variable(Event Player, S, Add, 1);
        Set Max Health(Event Player, Player Variable(Event Player, S));
        Set Player Variable(Event Player, P, Add(Player Variable(Event Player, P), 500));
    }
}

rule("buy damage resistance")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Array Contains(Players Within Radius(Subtract(Global Variable(F), Vector(-5.000, 0.500, 6.500)), 2, Team 1, Off), Event Player)
            == True;
        Is Button Held(Event Player, Interact) == True;
    }

    actions
    {
        Skip If(Compare(Player Variable(Event Player, A), >=, Player Variable(Event Player, Q)), 2);
        Big Message(Event Player, String("{0} {1} {2}", String("Go", Null, Null, Null), String("Find", Null, Null, Null), String("{0} {1}",
            String("More", Null, Null, Null), String("Money", Null, Null, Null), Null)));
        Abort;
        Modify Player Variable(Event Player, A, Subtract, Player Variable(Event Player, Q));
        Set Player Variable(Event Player, R, Max(Subtract(Player Variable(Event Player, R), 1), 1));
        Set Damage Received(Event Player, Player Variable(Event Player, R));
        Set Player Variable(Event Player, Q, Round To Integer(Raise To Power(Player Variable(Event Player, Q), 1.040), Up));
    }
}

rule("play sound (Debug)")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Is Communicating Any Voice line(Event Player) == True;
    }

    actions
    {
        Set Player Variable(Event Player, L, 5);
    }
}

rule("magic money maker")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Is Button Held(Event Player, Interact) == True;
        Is Button Held(Event Player, Crouch) == True;
        Is Firing Primary(Event Player) == True;
        True == True;
    }

    actions
    {
        Modify Player Variable(Event Player, A, Multiply, 10000);
        Small Message(Event Player, String("{0} {1}", String("Hacked", Null, Null, Null), String("Money", Null, Null, Null), Null));
    }
}

rule("boss 3 movement")
{
    event
    {
        Ongoing - Each Player;
        Team 2;
        Mei;
    }

    conditions
    {
        Is True For All(All Players(Team 2), Has Spawned(Current Array Element)) == True;
        Number of Players(Team 2) == 6;
    }

    actions
    {
        Wait(0.250, Ignore Condition);
    }
}