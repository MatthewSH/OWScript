from collections import defaultdict
from itertools import count
from string import capwords

try:
    from . import Errors
    from .AST import *
    from .Tokens import ALIASES
except ImportError:
    from AST import *

class Scope:
    def __init__(self, name, namespace=None):
        self.name = name
        self.namespace = namespace or {}

    def __repr__(self):
        return f"<Scope '{self.name}'>"

class Builtin:
    def range_(args):
        elements = list(map(lambda n: Numeral(value=str(n)), (range(*map(int, args)))))
        array = Array(elements=elements)
        return array

    functions = {
        'range': range_
    }

class Transpiler:
    def __init__(self, tree, indent_size=3):
        self.tree = tree
        self.indent_size = indent_size
        self.indent_level = 0
        self.global_vars = {}
        self.player_vars = {}
        self.global_index = count()
        self.player_index = defaultdict(count)
        self.pointer_index = 0
        self.line = 0
        self.functions = Builtin.functions
        self.arrays = {}
        self.scopes = [Scope(name='global')]
        self.aliases = {k: v for d in ALIASES.values() for k, v in d.items()}

    @property
    def tabs(self):
        return ' ' * self.indent_size * self.indent_level

    def parse_string(self, strings):
        code = '"'
        for name in strings:
            for scope in self.scopes[::-1]:
                if name in scope.namespace:
                    code += ''.join(scope.namespace.get(name).value).replace('"', '')
                    break
            else:
                code += name.replace('"', '').replace("'", '').replace('`', '')
        return code + '"'

    def assign(self, node, value):
        self.scopes[-1].namespace.update({node.name: value})
        code = ''
        name = node.name
        if type(node) == GlobalVar:
            index = self.global_vars.get(name)
            if index is None:
                index = next(self.global_index)
                self.global_vars[name] = index
            code += f'Set Global Variable At Index(A, {index}, '
        elif type(node) == PlayerVar:
            player = node.player
            index = self.player_vars.get((player, name))
            if index is None:
                index = next(self.player_index[player])
                self.player_vars[(player, name)] = index
            code += f'Set Player Variable At Index({player}, A, {index}, '
        code += self.visit(value) + ')'
        return code

    def lookup(self, node):
        name = node.name
        if type(node) == GlobalVar:
            index = self.global_vars.get(name)
            if index is None:
                index = self.global_vars[name] = next(self.global_index)
            return index
        elif type(node) == PlayerVar:
            player = node.player
            index = self.player_vars.get((player, name))
            if index is None:
                index = self.player_vars[(player, name)] = next(self.player_index[player])
            return index

    def visitScript(self, node):
        code = r'rule("Generated by https://github.com/adapap/OWScript") { Event { Ongoing - Global; }}' + '\n'
        return (code + self.visitChildren(node)).rstrip('\n')

    def visitRule(self, node):
        code = 'rule('
        code += self.parse_string(node.name.value)
        code += ') {\n' + self.visitChildren(node) + '}\n'
        return code

    def visitFunction(self, node):
        self.functions[node.name] = node
        return ''

    def visitBlock(self, node):
        self.indent_level += 1
        code = self.visitChildren(node)
        self.indent_level -= 1
        return code

    def visitRuleblock(self, node):
        code = self.tabs + node.name + ' {\n'
        self.indent_level += 1
        for ruleblock in node.children:
            for line in ruleblock.children:
                code += self.tabs + self.visit(line) + ';\n'
        self.indent_level -= 1
        code += self.tabs + '}\n'
        return code

    def visitOWID(self, node):
        code = self.aliases.get(node.name.upper(), node.name).title()
        if node.children:
            code += '('
            children = [self.visit(child) for child in node.children]
            if node.name.upper() == 'WAIT' and len(children) == 1:
                children.append('Ignore Condition')
            code += ', '.join(children)
            code += ')'
        return code

    def visitCompare(self, node):
        if node.op.lower() == 'in':
            return 'Array Contains(' + self.visit(node.right) + ', ' + self.visit(node.left) + ')'
        elif node.op.lower() == 'not in':
            return 'Not(Array Contains(' + self.visit(node.right) + ', ' + self.visit(node.left) + '))'
        return self.visit(node.left) + f' {node.op} ' + self.visit(node.right)

    def visitAssign(self, node):
        code = ''
        value = node.right
        name = node.left.parent.name if type(node.left) in (Item,) else node.left.name
        if type(value) == Array:
            self.arrays[name] = value
        elif type(value) == Call:
            function = self.functions[value.parent.name]
            if type(function) != Function:
                result = function(map(self.visit, value.args))
                if type(result) == Array:
                    self.arrays[name] = result
        value = {
            '+=': BinaryOp(left=node.left, op='+', right=value),
            '-=': BinaryOp(left=node.left, op='-', right=value),
            '*=': BinaryOp(left=node.left, op='*', right=value),
            '/=': BinaryOp(left=node.left, op='/', right=value),
            '^=': BinaryOp(left=node.left, op='^', right=value),
            '%=': BinaryOp(left=node.left, op='%', right=value)
        }.get(node.op, value)
        if type(node.left) not in (GlobalVar, PlayerVar, Item):
            raise Errors.SyntaxError('Invalid variable type in assignment')
        if type(node.left) == Item:
            item = node.left
            index = self.lookup(node=item.parent)
            try:
                array_index = int(self.visit(item.index))
            except ValueError:
                raise Errors.SyntaxError('Array modification index must be an integer')
            self.arrays[name][array_index] = value
            code += f'Set Global Variable(B, {self.visit(item.parent)});\n'
            if type(value) == Array:
                raise Errors.NotImplementedError('Array modification cannot be used for nested arrays')
            code += self.tabs + f'Set Global Variable At Index(B, {array_index}, {self.visit(value)});\n'
            code += self.tabs + f'Set Global Variable At Index(A, {index}, Global Variable(B))'
            return code
        code += self.assign(node=node.left, value=value)
        return code

    def visitIf(self, node):
        cond = self.visit(node.cond)
        true_lines = len(node.true_block.children)
        if node.false_block:
            true_lines += 1
            if type(node.false_block) == If:
                false_lines = len(node.false_block.true_block.children) + 1
            else:
                false_lines = len(node.false_block.children)
        code = 'Skip If(Not(' + cond + '), ' + str(true_lines) + ');\n'
        for line in node.true_block.children:
            code += self.tabs + self.visit(line) + ';\n'
        if node.false_block:
            code += self.tabs + 'Skip(' + str(false_lines) + ');\n'
            if type(node.false_block) == If:
                code += self.tabs + self.visit(node.false_block)
            else:
                for line in node.false_block.children:
                    code += self.tabs + self.visit(line) + ';\n'
        return code.rstrip(';\n')

    def visitWhile(self, node):
        lines = len(node.body.children) + 2
        code = f'Skip If(Not({self.visit(node.cond)}), {lines});\n'
        for line in node.body.children:
            code += self.tabs + self.visit(line) + ';\n'
        code += f'{self.tabs}Wait(0.001, Ignore Condition);\n'
        code += f'{self.tabs}Loop If({self.visit(node.cond)})'
        return code

    def visitFor(self, node):
        code = ''
        pointer = node.pointer
        if node.iterable.name in self.arrays:
            iterable = self.arrays.get(node.iterable.name)
            lines = []
            for elem in iterable:
                scope = Scope(name='for', namespace={pointer: elem})
                self.scopes.append(scope)
                self.indent_level -= 1
                lines.append(self.visit(node.body))
                self.indent_level += 1
                self.scopes.pop()
            code += (';\n' + self.tabs).join(lines)
        else:
            # for scope in self.scopes[::-1]:
            #     if node.iterable.name in scope.namespace:
            #         value = scope.namespace.get(node.iterable.name)
            #         print(value)
            #         break
            # else:
            #     raise NotImplementedError('For loops do not work with Overwatch types')
            raise NotImplementedError('Overwatch types not supported in loops yet')
        return code

    def visitBinaryOp(self, node):
        code = {
            '+': 'Add',
            '-': 'Subtract',
            '*': 'Multiply',
            '/': 'Divide',
            '^': 'Raise To Power',
            '%': 'Modulo',
            'or': 'Or',
            'and': 'And'
        }.get(node.op)
        code += '(' + self.visit(node.left) + ', ' + self.visit(node.right) + ')'
        return code

    def visitUnaryOp(self, node):
        if node.op == '-':
            code = '-' + self.visit(node.right)
        elif node.op == 'not':
            code = 'Not(' + self.visit(node.right) + ')'
        return code

    def visitGlobalVar(self, node):
        for scope in self.scopes[::-1]:
            if node.name in scope.namespace:
                value = scope.namespace.get(node.name)
                if type(value) == type(node) and value == node:
                    continue
                result = self.visit(value)
                return result
        index = self.lookup(node=node)
        return f'Value In Array(Global Variable(A), {index})'

    def visitPlayerVar(self, node):
        index = self.lookup(node=node)
        code = f'Value In Array(Player Variable(' + self.visit(node.player) + f', A), {index})'
        return code

    def visitString(self, node):
        code = 'String('
        code += self.parse_string(node.value)
        children = [', ' + self.visit(child) for child in node.children]
        code += ''.join(children)
        if len(children) < 3:
            code += ', ' + ', '.join(['Null'] * (3 - len(children)))
        return code + ')'

    def visitNumeral(self, node):
        return node.value

    def visitTime(self, node):
        time = node.value
        if time.endswith('ms'):
            time = float(time.rstrip('ms')) / 1000
        elif time.endswith('s'):
            time = float(time.rstrip('s'))
        elif time.endswith('min'):
            time = float(time.rstrip('min')) * 60
        return str(round(time, 3))

    def visitVector(self, node):
        code = 'Vector('
        components = ', '.join(self.visit(x) for x in node.children)
        code += components + ')'
        return code

    def visitArray(self, node):
        if not node.elements:
            code = 'Empty Array'
        else:
            num_elems = len(node.elements)
            code = 'Append To Array(' * num_elems
            code += 'Empty Array, ' + '), '.join(self.visit(elem) for elem in node.elements) + ')'
        return code

    def visitItem(self, node):
        return 'Value In Array(' + self.visit(node.parent) + ', ' + self.visit(node.index) + ')'

    def visitAttribute(self, node):
        attribute = {
            'x': 'X Component Of({})',
            'y': 'Y Component Of({})',
            'z': 'Z Component Of({})',
            'jumping': 'Is Button Held({}, Jump)',
            'crouching': 'Is Button Held({}, Crouch)',
            'moving': 'Compare(Speed Of({}), >, 0)'
        }.get(node.name.lower())
        code = attribute.format(self.visit(node.parent))
        return code

    def visitCall(self, node):
        callee = node.parent
        args = list(map(self.visit, node.args))
        code = ''
        if type(callee) == Attribute:
            method = callee.name
            if method == 'append':
                try:
                    assert len(args) == 1
                    value = self.visit(node.args[0])
                    self.arrays[callee.parent.name].append(value)
                    index = self.lookup(callee.parent)
                    if type(callee.parent) == GlobalVar:
                        code += f'Modify Global Variable At Index(A, {index}, Append To Array, {value})'
                except AssertionError:
                    raise Errors.SyntaxError('push expected 1 parameter, received {}'.format(len(args)))
                except Exception as e:
                    print(e)
            else:
                raise Errors.SyntaxError("Unknown method '{}'".format(method))
        else:
            try:
                function = self.functions[callee.name]
                if type(function) == Function:
                    assert len(function.params) == len(node.args)
                    params = [param.name for param in function.params]
                    scope = Scope(name=callee.name)
                    scope.namespace.update(dict(zip(params, node.args)))
                    self.scopes.append(scope)
                    code += (';\n' + self.tabs).join(map(self.visit, function.children))
                    self.scopes.pop()
                else:
                    try:
                        result = function(map(self.visit, node.args))
                        code += self.visit(result)
                    except ValueError:
                        raise Errors.SyntaxError('Invalid parameters for function {}'.format(callee.name))
            except AssertionError:
                raise Errors.SyntaxError("{} expected {} parameters, received {}".format(callee.name, len(function.params), len(node.args)))
            except KeyError:
                raise Errors.SyntaxError("Undefined function '{}'".format(callee.name))
        return code

    def visit(self, node):
        method_name = 'visit' + type(node).__name__
        visitor = getattr(self, method_name)
        return visitor(node)

    def visitChildren(self, node):
        code = ''
        for child in node.children:
            code += self.visit(child)
        return code

    def run(self):
        return self.visit(self.tree)