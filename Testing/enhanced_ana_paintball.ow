rule("Gamemode by Jinko#2838 - Join the discord for the lastest code version! (use Google)") {
	event {
		ongoing - global;
	}
}

rule("Map detector (credits: Kevlar)") {
	event {
		ongoing - global;
	}
	
	actions {
		set global variable(Z, round to integer(x component of(nearest walkable position(vector(100, 100, 100))), up));
	}
}

rule("Disable built-in game ending") {
	event {
		ongoing - global;
	}
	
	actions {
		disable built-in game mode completion;
	}
}

rule("Start match sooner") {
	event {
		ongoing - global;
	}
	
	actions {
		wait(1, ignore condition);
		set match time(10);
	}
	
	conditions {
		is assembling heroes == true;
	}
}

rule("Random voice line when match starts") {
	event {
		ongoing - each player;
		all;
		all;
	}
	
	actions {
		skip(multiply(2, random integer(0, 4)));
		communicate(event player, voice line up);
		abort;
		communicate(event player, voice line right);
		abort;
		communicate(event player, voice line down);
		abort;
		communicate(event player, voice line left);
		abort;
	}
	
	conditions {
		has spawned(event player) == true;
		number of deaths(event player) == 0;
	}
}

rule("If kills an enemy, says hello") {
	event {
		player earned elimination;
		all;
		all;
	}
	
	actions {
		skip if(compare(score of(event player), >=, 24), 1);
		communicate(event player, hello);
	}
	
	conditions {
		is alive(event player) == true;
	}
}

rule("If hardscopes (> 1,5 sec.), gets stunned 1 sec") {
	event {
		ongoing - each player;
		all;
		all;
	}
	
	actions {
		wait(1.7, abort when false);
		destroy hud text(player variable(event player, E));
		set status(event player, null, stunned, 1);
		create hud text(event player, string("{0} {1}", string("times", null, null, null), string("up", null, null, null), null), null, null, top, 100, red, white, white, visible to and string);
		set player variable(event player, F, last text id);
		wait(1, ignore condition);
		destroy hud text(player variable(event player, F));
	}
	
	conditions {
		global variable(Z) != 18;
		is firing secondary(event player) == true;
	}
}

rule("If hardscopes (> 1,5 sec.), gets frozen 1 sec") {
	event {
		ongoing - each player;
		all;
		all;
	}
	
	actions {
		wait(1.7, abort when false);
		destroy hud text(player variable(event player, E));
		set status(event player, null, frozen, 1);
		create hud text(event player, string("{0} {1}", string("times", null, null, null), string("up", null, null, null), null), null, null, top, 100, red, white, white, visible to and string);
		set player variable(event player, F, last text id);
		wait(1, ignore condition);
		destroy hud text(player variable(event player, F));
	}
	
	conditions {
		global variable(Z) == 18;
		is firing secondary(event player) == true;
	}
}

rule("Hardscope timer") {
	event {
		ongoing - each player;
		all;
		all;
	}
	
	actions {
		set player variable(event player, T, 1.5);
		chase player variable at rate(event player, T, 0, 1, destination and rate);
		create hud text(event player, player variable(event player, T), null, null, top, 5, white, white, white, visible to and string);
		set player variable(event player, E, last text id);
		wait(1.5, abort when false);
		destroy hud text(player variable(event player, E));
	}
	
	conditions {
		is firing secondary(event player) == true;
		match time <= 899;
	}
}

rule("Unscope = destroy hardscope timer") {
	event {
		ongoing - each player;
		all;
		all;
	}
	
	actions {
		destroy hud text(player variable(event player, E));
	}
	
	conditions {
		is firing secondary(event player) == false;
	}
}

rule("If score < 24, allow primary, allow secondary, disable ult") {
	event {
		ongoing - each player;
		all;
		all;
	}
	
	actions {
		set ultimate ability enabled(event player, false);
		allow button(event player, primary fire);
		allow button(event player, secondary fire);
	}
	
	conditions {
		and(compare(score of(event player), <, 24), is alive(event player)) == true;
	}
}

rule("If score > 19, apply burning effect") {
	event {
		player earned elimination;
		all;
		all;
	}
	
	actions {
		set status(event player, null, burning, 9999);
	}
	
	conditions {
		score of(event player) > 19;
	}
}

rule("If score < 20, disable burning effect") {
	event {
		ongoing - each player;
		all;
		all;
	}
	
	actions {
		clear status(event player, burning);
	}
	
	conditions {
		score of(event player) < 20;
	}
}

rule("If score = 24, nanoboost themselves, can only use sleep dart") {
	event {
		player earned elimination;
		all;
		all;
	}
	
	actions {
		disallow button(event player, primary fire);
		disallow button(event player, secondary fire);
		set ultimate ability enabled(event player, true);
		set ultimate charge(event player, 100);
		press button(event player, ultimate);
		big message(event player, string("{0}: {1}", string("current objective", null, null, null), string("{0} {1}", string("sleep", null, null, null), string("enemies", null, null, null), null), null));
		wait(0.25, ignore condition);
		set ultimate ability enabled(event player, false);
	}
	
	conditions {
		score of(event player) == 24;
	}
}

rule("If score = 24 and died, nanoboost themselves") {
	event {
		player died;
		all;
		all;
	}
	
	actions {
		set ultimate ability enabled(event player, true);
		wait(2.1, ignore condition);
		set ultimate charge(event player, 100);
		press button(event player, ultimate);
		small message(event player, string("{0}: {1}", string("current objective", null, null, null), string("{0} {1}", string("sleep", null, null, null), string("enemies", null, null, null), null), null));
	}
	
	conditions {
		score of(event player) == 24;
	}
}

rule("Create all effects - Eichenwalde") {
	event {
		ongoing - each player;
		all;
		all;
	}
	
	actions {
		create effect(all players(team(all)), ring, purple, vector(46.67, 7.52, -75.03), 1.85, visible to position and radius);
		create effect(all players(team(all)), ring, purple, vector(60.76, 12.95, -58.96), 1.3, visible to position and radius);
		create effect(all players(team(all)), ring, purple, vector(68, 13.45, -105), 1, visible to position and radius);
		create effect(all players(team(all)), ring, purple, vector(95.343, 13.5, -77.857), 0.75, visible to position and radius);
		create effect(all players(team(all)), good aura, yellow, vector(93, 19.92, -66.891), 0.5, visible to position and radius);
		create effect(all players(team(all)), good aura, yellow, vector(67.51, 5.97, -83.5), 0.5, visible to position and radius);
	}
	
	conditions {
		global variable(Z) == 124;
	}
}

rule("Main pad") {
	event {
		ongoing - each player;
		all;
		all;
	}
	
	actions {
		play effect(all players(team(all)), ring explosion sound, white, event player, 25);
		apply impulse(event player, up, 23, to world, cancel contrary motion);
	}
	
	conditions {
		global variable(Z) == 124;
		distance between(event player, vector(46.67, 7.52, -75.03)) <= 2.35;
		is in air(event player) == false;
	}
}

rule("Stairs pad") {
	event {
		ongoing - each player;
		all;
		all;
	}
	
	actions {
		play effect(all players(team(all)), ring explosion sound, white, event player, 15);
		apply impulse(event player, up, 20, to world, cancel contrary motion);
	}
	
	conditions {
		global variable(Z) == 124;
		distance between(event player, vector(60.76, 12.95, -58.96)) <= 1.8;
		is in air(event player) == false;
	}
}

rule("Camper pad") {
	event {
		ongoing - each player;
		all;
		all;
	}
	
	actions {
		play effect(all players(team(all)), ring explosion sound, white, event player, 17);
		apply impulse(event player, up, 20, to world, cancel contrary motion);
	}
	
	conditions {
		global variable(Z) == 124;
		distance between(event player, vector(68, 13.45, -105)) <= 1.5;
		is in air(event player) == false;
	}
}

rule("Elevator pad") {
	event {
		ongoing - each player;
		all;
		all;
	}
	
	actions {
		play effect(all players(team(all)), ring explosion sound, white, event player, 15);
		apply impulse(event player, up, 15, to world, cancel contrary motion);
		set status(event player, null, rooted, 0.1);
	}
	
	conditions {
		global variable(Z) == 124;
		distance between(event player, vector(95.343, 13.5, -77.857)) <= 1.25;
		is in air(event player) == false;
	}
}

rule("Platform launcher") {
	event {
		ongoing - each player;
		all;
		all;
	}
	
	actions {
		apply impulse(event player, multiply(velocity of(event player), number(-1)), square root(dot product(velocity of(event player), velocity of(event player))), to world, incorporate contrary motion);
		set status(event player, null, rooted, 0.9);
		apply impulse(event player, direction towards(vector(93, 19.92, -66.891), vector(34.95, 10.25, -89.7)), 100, to world, cancel contrary motion);
		apply impulse(event player, up, 20, to world, cancel contrary motion);
		play effect(all players(team(all)), debuff impact sound, white, vector(93, 19.92, -66.891), 40);
	}
	
	conditions {
		global variable(Z) == 124;
		distance between(event player, vector(93, 19.92, -66.891)) <= 1.5;
	}
}

rule("Cave launcher") {
	event {
		ongoing - each player;
		all;
		all;
	}
	
	actions {
		apply impulse(event player, multiply(velocity of(event player), number(-1)), square root(dot product(velocity of(event player), velocity of(event player))), to world, incorporate contrary motion);
		set status(event player, null, rooted, 0.9);
		apply impulse(event player, direction towards(vector(67.51, 5.97, -83.5), vector(80.501, 13.95, -87.623)), 20, to world, cancel contrary motion);
		apply impulse(event player, up, 18, to world, cancel contrary motion);
		play effect(all players(team(all)), debuff impact sound, white, vector(67.51, 5.97, -83.5), 30);
		set player variable(event player, D, 1.5);
		chase player variable at rate(event player, D, 0, 1, destination and rate);
	}
	
	conditions {
		global variable(Z) == 124;
		distance between(event player, vector(67.51, 5.97, -83.5)) <= 1.5;
	}
}

rule("Restricted area") {
	event {
		ongoing - each player;
		all;
		all;
	}
	
	actions {
		play effect(event player, explosion sound, white, event player, 30);
		apply impulse(event player, vector towards(event player, vector(58.779, 19.298, -77.287)), 10, to world, cancel contrary motion);
		apply impulse(event player, up, 1, to world, cancel contrary motion);
		small message(event player, string("{0} {1}", string("locked", null, null, null), string("zone", null, null, null), null));
		set status(event player, null, knocked down, 0.016);
		wait(0.5, ignore condition);
		loop if condition is true;
	}
	
	conditions {
		global variable(Z) == 124;
		or(compare(distance between(event player, vector(33.351, 14.932, -85.5)), <=, 5), compare(distance between(event player, vector(32.185, 15.248, -79.729)), <=, 6)) == true;
	}
}

rule("Create all effects - Ecopoint Antartica") {
	event {
		ongoing - each player;
		all;
		all;
	}
	
	actions {
		create effect(all players(team(all)), ring, purple, vector(2.92, 5.58, 3.729), 1, visible to position and radius);
		create effect(all players(team(all)), ring, purple, vector(2.899, 5.58, -3.351), 1, visible to position and radius);
		create effect(all players(team(all)), ring, purple, vector(-15, 7.52, 0), 1, visible to position and radius);
		create effect(all players(team(all)), good aura, yellow, vector(-2.351, 7.51, 40.71), 0.5, visible to position and radius);
		create effect(all players(team(all)), good aura, yellow, vector(-2.21, 8.52, 39.859), 0.5, visible to position and radius);
	}
	
	conditions {
		global variable(Z) == 18;
	}
}

rule("Mid 1") {
	event {
		ongoing - each player;
		all;
		all;
	}
	
	actions {
		play effect(all players(team(all)), ring explosion sound, white, event player, 25);
		apply impulse(event player, up, 18, to world, cancel contrary motion);
	}
	
	conditions {
		global variable(Z) == 18;
		distance between(event player, vector(2.92, 5.58, 3.729)) <= 1.5;
		is in air(event player) == false;
	}
}

rule("Mid 2") {
	event {
		ongoing - each player;
		all;
		all;
	}
	
	actions {
		play effect(all players(team(all)), ring explosion sound, white, event player, 25);
		apply impulse(event player, up, 18, to world, cancel contrary motion);
	}
	
	conditions {
		global variable(Z) == 18;
		distance between(event player, vector(2.899, 5.58, -3.351)) <= 1.5;
		is in air(event player) == false;
	}
}

rule("Garage") {
	event {
		ongoing - each player;
		all;
		all;
	}
	
	actions {
		play effect(all players(team(all)), ring explosion sound, white, event player, 25);
		apply impulse(event player, up, 14, to world, cancel contrary motion);
	}
	
	conditions {
		global variable(Z) == 18;
		distance between(event player, vector(-15, 7.52, 0)) <= 1.5;
		is in air(event player) == false;
	}
}

rule("Launcher right") {
	event {
		ongoing - each player;
		all;
		all;
	}
	
	actions {
		apply impulse(event player, multiply(velocity of(event player), number(-1)), square root(dot product(velocity of(event player), velocity of(event player))), to world, incorporate contrary motion);
		set status(event player, null, rooted, 0.9);
		apply impulse(event player, direction towards(vector(-2.351, 7.51, 40.71), vector(-2.351, 8.51, -40.71)), 25, to world, cancel contrary motion);
		apply impulse(event player, up, 17, to world, cancel contrary motion);
		play effect(all players(team(all)), debuff impact sound, white, vector(-2.351, 7.51, 40.71), 30);
	}
	
	conditions {
		global variable(Z) == 18;
		distance between(event player, vector(-2.351, 7.51, 40.71)) <= 1.5;
	}
}

rule("Launcher left") {
	event {
		ongoing - each player;
		all;
		all;
	}
	
	actions {
		apply impulse(event player, multiply(velocity of(event player), number(-1)), square root(dot product(velocity of(event player), velocity of(event player))), to world, incorporate contrary motion);
		set status(event player, null, rooted, 0.9);
		apply impulse(event player, direction towards(vector(-2.21, 8.52, 39.859), vector(-2.21, 8.52, 39.859)), 25, to world, cancel contrary motion);
		apply impulse(event player, up, 17, to world, cancel contrary motion);
		play effect(all players(team(all)), debuff impact sound, white, vector(-2.21, 8.52, 39.859), 30);
	}
	
	conditions {
		global variable(Z) == 18;
		distance between(event player, vector(-2.21, 8.52, 39.859)) <= 1.5;
	}
}

