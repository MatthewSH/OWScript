#################################################################
## Iro
################################################################ 
##
## * Press Ctrl + '+'/'-' To Zoom in
## * Press Ctrl + S to save and recalculate... 
## * Documents are saved to web storage.
## * Only one save slot supported.
## * Matches cannot span lines.
## * Unicode chars must be defined in \u0000 to \uffff format.
## * All matches must be contained by a single group ( ... )
## * Look behinds not permitted, (?<= or (?<!
## * Look forwards are permitted (?= or (?!
## * Constants are defined as __my_const = (......)
## * The \= format allows unescaped regular expressions
## * Constants referenced by match \= $${__my_const}
## * Constants can reference other constants
## * You are free to delete all the default scopes.
## * Twitter : ainslec , Web: http://eeyo.io/iro
##
################################################################

name                   = OWScript
file_extensions []     = owpy;

# Token Expressions

__KEYWORD \= (Event|Conditions|Actions)
__CONST \= (RECEIVERS, DAMAGERS, AND DAMAGE PERCENT|VISIBLE TO, POSITION, AND RADIUS|VISIBLE TO, POSITION, AND STRING|IS CONTROL MODE POINT LOCKED|IS CTF MODE IN SUDDEN DEATH|SURFACES AND ENEMY BARRIERS|CONTROL MODE SCORING TEAM|PLAYER EARNED ELIMINATION|SURFACES AND ALL BARRIERS|DESTINATION AND DURATION|PLAYER DEALT FINAL BLOW|EVENT WAS CRITICAL HIT|IS WAITING FOR PLAYERS|RECEIVERS AND DAMAGERS|CURRENT ARRAY ELEMENT|ONGOING - EACH PLAYER|VISIBLE TO AND STRING|DESTINATION AND RATE|IS ASSEMBLING HEROES|IS GAME IN PROGRESS|LAST CREATED ENTITY|PLAYER DEALT DAMAGE|POSITION AND RADIUS|PLAYER TOOK DAMAGE|IS BETWEEN ROUNDS|IS MATCH COMPLETE|RESTART WHEN TRUE|ABORT WHEN FALSE|IGNORE CONDITION|ONGOING - GLOBAL|PAYLOAD POSITION|GOOD AURA SOUND|BAD AURA SOUND|SPARKLES SOUND|PICK-UP SOUND|WRECKING BALL|BEACON SOUND|ENERGY SOUND|EVENT PLAYER|DECAL SOUND|EMPTY ARRAY|IS IN SETUP|LIGHT SHAFT|PLAYER DIED|SMOKE SOUND|SOLDIER: 76|ALL HEROES|VISIBLE TO|WIDOWMAKER|GOOD AURA|REINHARDT|ATTACKER|BACKWARD|BAD AURA|BAPTISTE|BRIGITTE|DOOMFIST|SPARKLES|SURFACES|SYMMETRA|TORBJÖRN|ZENYATTA|BASTION|FORWARD|JUNKRAT|ROADHOG|WINSTON|MCCREE|PHARAH|PURPLE|REAPER|SOMBRA|SPHERE|STRING|TEAM 1|TEAM 2|TRACER|VICTIM|YELLOW|CLOUD|FALSE|GENJI|GREEN|HANZO|LÚCIO|MERCY|MOIRA|ORISA|RIGHT|WHITE|ZARYA|ASHE|BLUE|D.VA|DOWN|LEFT|NONE|NULL|RING|TRUE|ALL|ANA|MEI|OFF|ORB|RED|UP)
__ACTION \= (DISABLE BUILT-IN GAME MODE COMPLETION|DISABLE BUILT-IN GAME MODE RESPAWNING|DISABLE BUILT-IN GAME MODE ANNOUNCER|ENABLE BUILT-IN GAME MODE COMPLETION|ENABLE BUILT-IN GAME MODE RESPAWNING|ENABLE BUILT-IN GAME MODE ANNOUNCER|DISABLE BUILT-IN GAME MODE SCORING|DISABLE DEATH SPECTATE ALL PLAYERS|DISABLE DEATH SPECTATE TARGET HUD|ENABLE BUILT-IN GAME MODE SCORING|ENABLE DEATH SPECTATE ALL PLAYERS|DISABLE BUILT-IN GAME MODE MUSIC|ENABLE DEATH SPECTATE TARGET HUD|CHASE GLOBAL VARIABLE OVER TIME|CHASE PLAYER VARIABLE OVER TIME|ENABLE BUILT-IN GAME MODE MUSIC|START FORCING PLAYER TO BE HERO|RESET PLAYER HERO AVAILABILITY|STOP FORCING PLAYER TO BE HERO|CHASE GLOBAL VARIABLE AT RATE|CHASE PLAYER VARIABLE AT RATE|STOP ALL DAMAGE MODIFICATIONS|SET GLOBAL VARIABLE AT INDEX|SET PLAYER VARIABLE AT INDEX|SET ULTIMATE ABILITY ENABLED|STOP CHASING GLOBAL VARIABLE|STOP CHASING PLAYER VARIABLE|ABORT IF CONDITION IS FALSE|ABORT IF CONDITION IS TRUE|LOOP IF CONDITION IS FALSE|SET SECONDARY FIRE ENABLED|DESTROY ALL IN-WORLD TEXT|LOOP IF CONDITION IS TRUE|SET OBJECTIVE DESCRIPTION|SET PLAYER ALLOWED HEROES|START DAMAGE MODIFICATION|STOP ALL DAMAGE OVER TIME|SET PRIMARY FIRE ENABLED|START FORCING SPAWN ROOM|STOP DAMAGE MODIFICATION|STOP ALL HEAL OVER TIME|STOP FORCING SPAWN ROOM|DECLARE PLAYER VICTORY|MODIFY GLOBAL VARIABLE|MODIFY PLAYER VARIABLE|SET PROJECTILE GRAVITY|START DAMAGE OVER TIME|START FORCING THROTTLE|DECLARE ROUND VICTORY|DESTROY IN-WORLD TEXT|GO TO ASSEMBLE HEROES|SET ABILITY 1 ENABLED|SET ABILITY 2 ENABLED|STOP DAMAGE OVER TIME|STOP FORCING THROTTLE|CREATE IN-WORLD TEXT|DECLARE TEAM VICTORY|DESTROY ALL HUD TEXT|SET HEALING RECEIVED|SET PROJECTILE SPEED|SET RESPAWN MAX TIME|START HEAL OVER TIME|START HOLDING BUTTON|DESTROY ALL EFFECTS|MODIFY PLAYER SCORE|SET DAMAGE RECEIVED|SET GLOBAL VARIABLE|SET PLAYER VARIABLE|SET ULTIMATE CHARGE|STOP HEAL OVER TIME|STOP HOLDING BUTTON|DECLARE MATCH DRAW|START ACCELERATING|UNPAUSE MATCH TIME|DESTROY ALL ICONS|MODIFY TEAM SCORE|SET HEALING DEALT|STOP ACCELERATING|DESTROY HUD TEXT|PAUSE MATCH TIME|SET DAMAGE DEALT|SET PLAYER SCORE|CREATE HUD TEXT|DISALLOW BUTTON|SET SLOW MOTION|DESTROY EFFECT|SET MATCH TIME|SET MAX HEALTH|SET MOVE SPEED|SET TEAM SCORE|APPLY IMPULSE|CREATE EFFECT|SET AIM SPEED|SET INVISIBLE|SMALL MESSAGE|ALLOW BUTTON|CLEAR STATUS|DESTROY ICON|PRELOAD HERO|PRESS BUTTON|START CAMERA|START FACING|BIG MESSAGE|COMMUNICATE|CREATE ICON|PLAY EFFECT|SET GRAVITY|STOP CAMERA|STOP FACING|SET FACING|SET STATUS|RESURRECT|ABORT IF|TELEPORT|LOOP IF|RESPAWN|SKIP IF|DAMAGE|ABORT|HEAL|KILL|LOOP|SKIP|WAIT)
__VALUE \= (CONTROL MODE SCORING PERCENTAGE|HORIZONTAL ANGLE FROM DIRECTION|IS COMMUNICATING ANY VOICE LINE|NUMBER OF PLAYERS ON OBJECTIVE|VERTICAL ANGLE FROM DIRECTION|ALL PLAYERS NOT ON OBJECTIVE|LAST DAMAGE MODIFICATION ID|PAYLOAD PROGRESS PERCENTAGE|HORIZONTAL FACING ANGLE OF|IS COMMUNICATING ANY EMOTE|NEAREST WALKABLE POSITION|PLAYER CLOSEST TO RETICLE|ALL PLAYERS ON OBJECTIVE|HORIZONTAL ANGLE TOWARDS|LAST DAMAGE OVER TIME ID|NUMBER OF LIVING PLAYERS|POINT CAPTURE PERCENTAGE|VERTICAL FACING ANGLE OF|ULTIMATE CHARGE PERCENT|LAST HEAL OVER TIME ID|NUMBER OF DEAD PLAYERS|NUMBER OF ELIMINATIONS|VERTICAL ANGLE TOWARDS|DIRECTION FROM ANGLES|IS FLAG BEING CARRIED|IS OBJECTIVE COMPLETE|NUMBER OF FINAL BLOWS|PLAYERS IN VIEW ANGLE|PLAYERS WITHIN RADIUS|RANDOM VALUE IN ARRAY|RAY CAST HIT POSITION|SPEED OF IN DIRECTION|FARTHEST PLAYER FROM|INDEX OF ARRAY VALUE|IS COMMUNICATING ANY|IS HERO BEING PLAYED|PLAYER CARRYING FLAG|COSINE FROM DEGREES|COSINE FROM RADIANS|FACING DIRECTION OF|HORIZONTAL SPEED OF|IS FIRING SECONDARY|IS IN LINE OF SIGHT|IS PORTRAIT ON FIRE|RAY CAST HIT NORMAL|RAY CAST HIT PLAYER|ALL LIVING PLAYERS|IS TEAM ON DEFENSE|IS TEAM ON OFFENSE|IS USING ABILITY 1|IS USING ABILITY 2|OBJECTIVE POSITION|TOTAL TIME ELAPSED|CLOSEST PLAYER TO|DIRECTION TOWARDS|IS FIRING PRIMARY|IS USING ULTIMATE|NUMBER OF PLAYERS|REMOVE FROM ARRAY|SINE FROM DEGREES|SINE FROM RADIANS|VERTICAL SPEED OF|ALL DEAD PLAYERS|ANGLE DIFFERENCE|DISTANCE BETWEEN|HERO ICON STRING|IS COMMUNICATING|IS IN SPAWN ROOM|IS IN VIEW ANGLE|NUMBER OF DEATHS|NUMBER OF HEROES|OPPOSITE TEAM OF|RANDOMIZED ARRAY|ROUND TO INTEGER|APPEND TO ARRAY|GLOBAL VARIABLE|IS FLAG AT BASE|IS ON OBJECTIVE|IS TRUE FOR ALL|IS TRUE FOR ANY|LOCAL VECTOR OF|OBJECTIVE INDEX|PLAYER VARIABLE|PLAYERS IN SLOT|PLAYERS ON HERO|WORLD VECTOR OF|ABSOLUTE VALUE|ALLOWED HEROES|FILTERED ARRAY|HEALTH PERCENT|IS BUTTON HELD|RAISE TO POWER|RANDOM INTEGER|VALUE IN ARRAY|VECTOR TOWARDS|X COMPONENT OF|Y COMPONENT OF|Z COMPONENT OF|CROSS PRODUCT|ENTITY EXISTS|FLAG POSITION|EVENT DAMAGE|EYE POSITION|IS CROUCHING|IS ON GROUND|LAST TEXT ID|SORTED ARRAY|ALL PLAYERS|ALTITUDE OF|ARRAY SLICE|DOT PRODUCT|HAS SPAWNED|IS STANDING|MATCH ROUND|POSITION OF|RANDOM REAL|SQUARE ROOT|THROTTLE OF|VELOCITY OF|HAS STATUS|IS ON WALL|MATCH TIME|MAX HEALTH|TEAM SCORE|IS IN AIR|IS MOVING|NORMALIZE|COUNT OF|FIRST OF|IS ALIVE|MULTIPLY|SCORE OF|SPEED OF|SUBTRACT|COMPARE|HERO OF|IS DEAD|LAST OF|SLOT OF|TEAM OF|DIVIDE|HEALTH|MODULO|NUMBER|VECTOR|HERO|TEAM|ADD|MAX|MIN)
__NAME \= ([_a-zA-Z][_a-zA-Z0-9]*)

# Styles

styles [] {

.comment : style {
   color = #75715E
   textmate_scope = comment
}

.annotation : style {
   color = #75715E
   textmate_scope = comment.annotation
}

.keyword : style {
   color = #F92672
   textmate_scope = keyword
}

.operator : style {
   color = #F92672
   textmate_scope = keyword.operator
}

.rule : style {
   color = #66D9EF
   italic = true
   textmate_scope = storage.type.rule
}

.numeric : style {
   color = #AE81FF
   textmate_scope = constant.numeric
}

.const : style {
   color = #AE81FF
   textmate_scope = constant.language
}

.value : style {
   color = #66D9EF
   textmate_scope = variable.function.value
}

.action : style {
   color = #66D9EF
   textmate_scope = variable.function.action
}

.name : style {
   color = white
   textmate_scope = constant.name
}

.punctuation : style {
   textmate_scope = punctuation
}

.string : style {
   color = #E6DB74
   textmate_scope = string
}

.format : style {
   color = #AE81FF
   textmate_scope = string.format
}

.illegal : style {
   color = white
   background_color = red
   textmate_scope = invalid
}

.function : style {
   color = #A6E22E
   textmate_scope = entity.name.function
}

.param : style {
   color = #FD971F
   italic = true
   textmate_scope = variable.parameter
}

.call : style {
   color = #66D9EF
   textmate_scope = variable.function
}

.pvar : style {
   color = #FD971F
   textmate_scope = variable.language
}

.empty : style {
   textmate_scope = empty
}

}

# Contexts

contexts [] {

main : context {
   // Function with params
   : push {
      regex \= (\%$${__NAME})(?=\()
      styles [] = .function;
      context [] = param_list;
   }
   // Function
   : pattern {
      regex \= (\%$${__NAME}\b)
      styles [] = .function;
   }
   // Whitespace
   : inline_push {
      regex \= (\s+)
      styles [] = .empty;
      default_style = .empty
      
      : pop {
         regex \= (?=\S)
         styles [] = .empty;
      }
   }
   // Semicolons
   : pattern {
      regex \= (;)
      styles [] = .punctuation;
   }
   // Constants
   : pattern {
      regex \= (\b$${__CONST}\b)
      styles [] = .const;
   }
   // Keywords
   : pattern {
      regex \= (\s*\b$${__KEYWORD}\b)
      styles [] = .keyword;
   }
   : include "rule";
}

param_list : context {
   : pop {
      regex \= (\))
      styles [] = .punctuation;
   }
   
   : pattern {
      regex \= (\()
      styles [] = .punctuation;
   }
   
   : pattern {
      regex \= (,)
      styles [] = .punctuation;
   }
   // Parameters   
   : pattern {
      regex \= ([_a-zA-Z][_a-zA-Z0-9]*)
      styles [] = .param;
   }
   
   : include "multiline_comment";
}

rule : context {
   : pattern {
      regex \= (Rule)
      styles [] = .rule;
   }
   : include "expr";
}

expr : context {
   : inline_push {
      regex \= (\s+)
      styles [] = .empty;
      default_style = .empty
      
      : pop {
         regex \= (?=\S)
         styles [] = .empty;
      }
   }
   
   // Comments
   : pattern {
      regex \= (//.*)
      styles [] = .comment;
   }
   : include "multiline_comment";
   
   : push {
      regex \= $${__NAME}(?=\()
      styles [] = .call;
      context [] = arg_list;
   }
   
   : pattern {
      regex \= (\b$${__VALUE}\b)
      styles [] = .value;
   }
   
   : pattern {
      regex \= (\b$${__ACTION}\b)
      styles [] = .action;
   }
   
   : pattern {
      regex \= (\b$${__CONST}\b)
      styles [] = .const;
   }
   
   : pattern {
      regex \= (\b$${__NAME}\:)
      styles [] = .annotation;
   }
   
   : pattern {
      regex \= (pvar|gvar)
      styles[] = .pvar;
   }
   
   : pattern {
      regex \= (\s*$${__NAME})
      styles = .name
   }
   
   : pattern {
      regex \= ("[^"]*")
      styles [] = .string;
   }
   
   // Format String
   : push {
      regex \= (`)
      styles [] = .string;
      context [] = fstring;
   }
   
   : pattern {
      regex \= \b([_a-zA-Z][ \-_a-zA-Z0-9]*)\b
      styles [] = .name;
   }
   
   : pattern {
      regex \= \b(\d+(\.\d+)?(ms|s|min)?)\b
      styles [] = .numeric;
   }
   
   : include "operators";
}

operators : context {
   : pattern {
      regex \= (==|<=|<|>=|>|!=|=|\+|\-|\*|\/|^|%)
      styles [] = .operator;
   }
}

arg_list : context {
   : pop {
      regex \= (\))
      styles [] = .punctuation;
   }
   
   : pattern {
      regex \= (\()
      styles [] = .punctuation;
   }
   
   : pattern {
      regex \= (,)
      styles [] = .punctuation;
   }
   
   : include "expr";
}

fstring : context {
   : pop {
      regex \= (`)
      styles [] = .string;
   }
   
   : inline_push {
      regex \= (\{)
      styles [] = .format;
      default_style = .format
      
      : pop {
         regex \= (\})
         styles [] = .format;
      }
   }
   
   : pattern {
      regex \= ([^{}`]*)
      styles [] = .string;
   }
}

# Comments

multiline_comment : context {
   description        = multiline
   : inline_push {
      regex          \= (\s*/\*)
      styles []       = .comment;
      default_style   = .comment
      : pop {
         regex       \= (\*/)
         styles []    = .comment;
      }
   }
}

}