rule("INITIALIze global CONSTANTS")
{
    event
    {
        Ongoing - Global;
    }

    actions
    {
        Set Global Variable(A, Empty Array);
        Modify Global Variable(A, Append To Array, Vector(-40.000, 0, 145.500));
        Modify Global Variable(A, Append To Array, Vector(-29.000, 8, 56));
        Modify Global Variable(A, Append To Array, Vector(-77.500, 1.500, 65.500));
        Modify Global Variable(A, Append To Array, Vector(-50.500, 1.500, 117));
        Modify Global Variable(A, Append To Array, Vector(43.500, 3.500, 73.500));
        Modify Global Variable(A, Append To Array, Vector(-115.000, 1.500, 112.500));
        Set Global Variable(B, Empty Array);
        Modify Global Variable(B, Append To Array, Vector(-31.500, -1.500, 148));
        Modify Global Variable(B, Append To Array, Vector(-22.500, 7.500, 66.500));
        Modify Global Variable(B, Append To Array, Vector(-82.500, 1.500, 61));
        Modify Global Variable(B, Append To Array, Vector(-59.000, 1, 104));
        Modify Global Variable(B, Append To Array, Vector(53.500, 3.500, 72.500));
        Modify Global Variable(B, Append To Array, Vector(-129.000, 2.500, 108.500));
        Set Global Variable(D, Empty Array);
        Modify Global Variable(D, Append To Array, Hero(Roadhog));
        Modify Global Variable(D, Append To Array, Hero(Soldier: 76));
        Modify Global Variable(D, Append To Array, Hero(Mei));
        Modify Global Variable(D, Append To Array, Hero(LÃºcio));
        Modify Global Variable(D, Append To Array, Hero(Ana));
        Modify Global Variable(D, Append To Array, Hero(Reaper));
        Set Global Variable(E, Empty Array);
        Modify Global Variable(E, Append To Array, Vector(-50.000, 1, 137.350));
        Modify Global Variable(E, Append To Array, Vector(-7.000, 3, 75));
        Modify Global Variable(E, Append To Array, Vector(-37.000, 6.500, 48));
        Modify Global Variable(E, Append To Array, Vector(-55.000, 1.500, 141.500));
        Modify Global Variable(E, Append To Array, Vector(-25.500, 7.500, 50.500));
        Modify Global Variable(E, Append To Array, Vector(-70.000, 1.500, 63.500));
        Modify Global Variable(E, Append To Array, Vector(-80.000, 1.500, 71));
        Modify Global Variable(E, Append To Array, Vector(-58.000, 2, 122));
        Modify Global Variable(E, Append To Array, Vector(-63.000, 2.500, 115.500));
        Modify Global Variable(E, Append To Array, Vector(41, 3.500, 78.500));
        Modify Global Variable(E, Append To Array, Vector(41, 3.500, 67.500));
        Modify Global Variable(E, Append To Array, Vector(-118.500, 1.500, 99.500));
        Set Global Variable(F, Vector(2.500, 3.500, 75));
        Set Global Variable(G, Empty Array);
        Modify Global Variable(G, Append To Array, Vector(-29.000, -2.000, 56));
        Modify Global Variable(G, Append To Array, Vector(-54.000, 1, 109));
        Set Match Time(3599);
        Pause Match Time;
        Set Global Variable(I, Vector(-172.000, 3, 96));
    }
}

rule("initialize player variables")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    actions
    {
        Set Player Variable(Event Player, A, 0);
        Set Player Variable(Event Player, B, 1);
        Set Damage Dealt(Event Player, Player Variable(Event Player, B));
        Set Player Variable(Event Player, E, 2);
        Set Player Variable(Event Player, F, 0);
        Set Player Variable(Event Player, H, 15);
        Set Player Variable(Event Player, I, 5);
        Set Player Variable(Event Player, J, 1);
        Set Player Variable(Event Player, K, 10);
        Set Player Variable(Event Player, L, 0);
        Set Player Variable(Event Player, M, False);
        Set Player Variable(Event Player, N, 0);
        Set Player Variable(Event Player, O, 0);
        Set Player Variable(Event Player, P, 250);
        Set Player Variable(Event Player, Q, 25);
        Set Player Variable(Event Player, R, 100);
        Set Player Variable(Event Player, S, 5);
        Set Player Variable(Event Player, T, False);
    }
}

rule("Initialize HUDs")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    actions
    {
        Create HUD Text(Event Player, String("{0}: {1}", String("Money", Null, Null, Null), Player Variable(Event Player, A), Null), Null,
            Null, Top, 0, White, White, White, Visible To and String);
        Create HUD Text(Event Player, Null, String("{0} / {1}", String("{0}: {1}", String("Damage", Null, Null, Null), String("{0}%",
            Player Variable(Event Player, B), Null, Null), Null), String("{0}: {1}", String("Defend", Null, Null, Null), String("{0}%",
            Player Variable(Event Player, R), Null, Null), Null), Null), Null, Top, 1, White, Red, White, Visible To and String);
        Create HUD Text(Event Player, Null, String("{0} sec", Player Variable(Event Player, E), Null, Null), Null, Top, 2, White, Yellow,
            White, Visible To and String);
        Create HUD Text(Event Player, Null, String("{0} {1}", String("{0}%", Multiply(Player Variable(Event Player, J), 100), Null, Null),
            String("Money", Null, Null, Null), Null), Null, Top, 3, White, Green, White, Visible To and String);
        Create HUD Text(Event Player, Null, String("{0} {1} {2}", Player Variable(Event Player, N), String("Credits", Null, Null, Null),
            String("({0})", String("{0} {1}", String("Boss", Null, Null, Null), String("{0}: {1}", String("Kills", Null, Null, Null),
            Player Variable(Event Player, L), Null), Null), Null, Null)), Null, Top, 4, White, Purple, White, Visible To and String);
        Create In-World Text(All Players(Team 1), String("{0} - {1} - {2}", String("{0}: {1}", String("Damage", Null, Null, Null), String(
            "{0}%", Player Variable(Event Player, B), Null, Null), Null), String("{0} sec", Player Variable(Event Player, E), Null, Null),
            String("{0} {1}", String("{0}%", Multiply(Player Variable(Event Player, J), 100), Null, Null), String("Money", Null, Null,
            Null), Null)), Event Player, 0.750, Clip Against Surfaces, Visible To Position and String);
    }
}

rule("initialize portals/shop")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    actions
    {
        Create Effect(All Players(Team 1), Good Aura, Yellow, Value In Array(Global Variable(E), 0), 1.500,
            Visible To Position and Radius);
        Create In-World Text(All Players(Team 1), String("Upgrades", Null, Null, Null), Add(Value In Array(Global Variable(E), 0), Vector(
            0, 1, 0)), 1.500, Clip Against Surfaces, Visible To Position and String);
        Create Effect(All Players(Team 1), Good Aura, Blue, Value In Array(Global Variable(E), 3), 1.500, Visible To Position and Radius);
        Create In-World Text(All Players(Team 1), String("{0} {1} {2}", String("Next", Null, Null, Null), String("Boss", Null, Null, Null),
            String("({0})", String("{0}: {1}", String("Price", Null, Null, Null), 1000, Null), Null, Null)), Add(Value In Array(
            Global Variable(E), 3), Vector(0, 1, 0)), 1.500, Clip Against Surfaces, Visible To Position and String);
        Create Effect(All Players(Team 1), Good Aura, Red, Value In Array(Global Variable(E), 1), 1.500, Visible To Position and Radius);
        Create In-World Text(All Players(Team 1), String("{0} {1}", String("Current", Null, Null, Null), String("Boss", Null, Null, Null),
            Null), Add(Value In Array(Global Variable(E), 1), Vector(0, 1, 0)), 1.500, Clip Against Surfaces,
            Visible To Position and String);
        Create Effect(All Players(Team 1), Good Aura, Yellow, Value In Array(Global Variable(E), 2), 1.500,
            Visible To Position and Radius);
        Create In-World Text(All Players(Team 1), String("Upgrades", Null, Null, Null), Add(Value In Array(Global Variable(E), 2), Vector(
            0, 1, 0)), 1.500, Clip Against Surfaces, Visible To Position and String);
        Create Effect(All Players(Team 1), Good Aura, Blue, Value In Array(Global Variable(E), 4), 1.500, Visible To Position and Radius);
        Create In-World Text(All Players(Team 1), String("{0} {1} {2}", String("Next", Null, Null, Null), String("Boss", Null, Null, Null),
            String("({0})", String("{0}: {1}", String("Price", Null, Null, Null), String("{0} {1}", 12, 500, Null), Null), Null, Null)),
            Add(Value In Array(Global Variable(E), 4), Vector(0, 1, 0)), 1.500, Clip Against Surfaces, Visible To Position and String);
        Create Effect(All Players(Team 1), Good Aura, Yellow, Value In Array(Global Variable(E), 5), 1.500,
            Visible To Position and Radius);
        Create In-World Text(All Players(Team 1), String("Upgrades", Null, Null, Null), Add(Value In Array(Global Variable(E), 5), Vector(
            0, 1, 0)), 1.500, Clip Against Surfaces, Visible To Position and String);
        Create Effect(All Players(Team 1), Good Aura, Blue, Value In Array(Global Variable(E), 6), 1.500, Visible To Position and Radius);
        Create In-World Text(All Players(Team 1), String("{0} {1} {2}", String("Next", Null, Null, Null), String("Boss", Null, Null, Null),
            String("({0})", String("{0}: {1}", String("Price", Null, Null, Null), Multiply(100, 1000), Null), Null, Null)), Add(
            Value In Array(Global Variable(E), 6), Vector(0, 1, 0)), 1.500, Clip Against Surfaces, Visible To Position and String);
        Create Effect(All Players(Team 1), Good Aura, Yellow, Value In Array(Global Variable(E), 7), 1.500,
            Visible To Position and Radius);
        Create In-World Text(All Players(Team 1), String("Upgrades", Null, Null, Null), Add(Value In Array(Global Variable(E), 7), Vector(
            0, 1, 0)), 1.500, Clip Against Surfaces, Visible To Position and String);
        Create Effect(All Players(Team 1), Good Aura, Blue, Value In Array(Global Variable(E), 8), 1.500, Visible To Position and Radius);
        Create In-World Text(All Players(Team 1), String("{0} {1} {2}", String("Next", Null, Null, Null), String("Boss", Null, Null, Null),
            String("({0})", String("{0}: {1}", String("Price", Null, Null, Null), Multiply(350, 1000), Null), Null, Null)), Add(
            Value In Array(Global Variable(E), 8), Vector(0, 1, 0)), 1.500, Clip Against Surfaces, Visible To Position and String);
        Create Effect(All Players(Team 1), Good Aura, Yellow, Value In Array(Global Variable(E), 9), 1.500,
            Visible To Position and Radius);
        Create In-World Text(All Players(Team 1), String("Upgrades", Null, Null, Null), Add(Value In Array(Global Variable(E), 9), Vector(
            0, 1, 0)), 1.500, Clip Against Surfaces, Visible To Position and String);
        Create Effect(All Players(Team 1), Good Aura, Blue, Value In Array(Global Variable(E), 10), 1.500, Visible To Position and Radius);
        Create In-World Text(All Players(Team 1), String("{0} {1} {2}", String("Next", Null, Null, Null), String("Boss", Null, Null, Null),
            String("({0})", String("{0}: {1}", String("Price", Null, Null, Null), Multiply(1500, 1000), Null), Null, Null)), Add(
            Value In Array(Global Variable(E), 10), Vector(0, 1, 0)), 1.500, Clip Against Surfaces, Visible To Position and String);
        Create Effect(All Players(Team 1), Good Aura, Yellow, Value In Array(Global Variable(E), 11), 1.500,
            Visible To Position and Radius);
        Create In-World Text(All Players(Team 1), String("Upgrades", Null, Null, Null), Add(Value In Array(Global Variable(E), 11), Vector(
            0, 1, 0)), 1.500, Clip Against Surfaces, Visible To Position and String);
    }
}

rule("Initialize boundaries")
{
    event
    {
        Ongoing - Global;
    }

    actions
    {
        Create Effect(All Players(Team 1), Sphere, Blue, Global Variable(F), 13, Visible To Position and Radius);
        Create Effect(All Players(Team 1), Light Shaft, Red, Value In Array(Global Variable(G), 0), 17, Visible To Position and Radius);
        Create Effect(All Players(Team 1), Light Shaft, Red, Subtract(Value In Array(Global Variable(A), 2), Vector(0, 3, 0)), 9,
            Visible To Position and Radius);
        Create Effect(All Players(Team 1), Sphere, Red, Value In Array(Global Variable(G), 1), 16, Visible To Position and Radius);
    }
}

rule("initialize upgrades")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    actions
    {
        Create Effect(All Players(Team 1), Orb, Yellow, Subtract(Global Variable(F), Vector(0, 0.500, 8.500)), 3,
            Visible To Position and Radius);
        Create In-World Text(Event Player, String("{0} {1}", String("Upgrade", Null, Null, Null), String("{0} {1}", String("Faster", Null,
            Null, Null), String("({0})", String("{0}: {1}", String("Price", Null, Null, Null), Player Variable(Event Player, H), Null),
            Null, Null), Null), Null), Subtract(Global Variable(F), Vector(0, 0, 8.500)), 1.500, Clip Against Surfaces,
            Visible To Position and String);
        Create Effect(All Players(Team 1), Orb, Red, Subtract(Global Variable(F), Vector(2.500, 0.500, 8.500)), 3,
            Visible To Position and Radius);
        Create In-World Text(Event Player, String("{0} {1}", String("Upgrade", Null, Null, Null), String("{0} {1}", String("Damage", Null,
            Null, Null), String("({0})", String("{0}: {1}", String("Price", Null, Null, Null), Player Variable(Event Player, I), Null),
            Null, Null), Null), Null), Subtract(Global Variable(F), Vector(2.500, 0, 8.500)), 1.500, Clip Against Surfaces,
            Visible To Position and String);
        Create Effect(All Players(Team 1), Orb, Green, Subtract(Global Variable(F), Vector(-2.500, 0.500, 8.500)), 3,
            Visible To Position and Radius);
        Create In-World Text(Event Player, String("{0} {1}", String("Upgrade", Null, Null, Null), String("{0} {1}", String("Money", Null,
            Null, Null), String("({0})", String("{0}: {1}", String("Price", Null, Null, Null), Player Variable(Event Player, K), Null),
            Null, Null), Null), Null), Subtract(Global Variable(F), Vector(-2.500, 0, 8.500)), 1.500, Clip Against Surfaces,
            Visible To Position and String);
        Create Effect(All Players(Team 1), Orb, Purple, Subtract(Global Variable(F), Vector(5, 0.500, 6.500)), 3,
            Visible To Position and Radius);
        Create In-World Text(Event Player, String("{0} {1}", String("Upgrade", Null, Null, Null), String("{0} {1}", String("Healed", Null,
            Null, Null), String("({0})", String("{0}: {1}", String("Price", Null, Null, Null), Player Variable(Event Player, P), Null),
            Null, Null), Null), Null), Subtract(Global Variable(F), Vector(5, 0, 6.500)), 1.500, Clip Against Surfaces,
            Visible To Position and String);
        Create Effect(All Players(Team 1), Orb, Blue, Subtract(Global Variable(F), Vector(-5.000, 0.500, 6.500)), 3,
            Visible To Position and Radius);
        Create In-World Text(Event Player, String("{0} {1}", String("Upgrade", Null, Null, Null), String("{0} {1}", String("Defend", Null,
            Null, Null), String("({0})", String("{0}: {1}", String("Price", Null, Null, Null), Player Variable(Event Player, Q), Null),
            Null, Null), Null), Null), Subtract(Global Variable(F), Vector(-5.000, 0, 6.500)), 1.500, Clip Against Surfaces,
            Visible To Position and String);
        Create In-World Text(All Players(All Teams), String("{0} {1} {2}", String("Buy", Null, Null, Null), String("Items", Null, Null,
            Null), String("({0})", String("Rank F", Null, Null, Null), Null, Null)), Subtract(Global Variable(F), Vector(0, -0.500,
            8.500)), 2.500, Clip Against Surfaces, Visible To Position and String);
    }
}

rule("initialize abilities")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    actions
    {
        Set Global Variable At Index(H, 0, Vector(12.500, 1, 70.500));
        Create Effect(All Players(All Teams), Light Shaft, White, Value In Array(Global Variable(H), 0), 2,
            Visible To Position and Radius);
        Create In-World Text(All Players(Team 1), String("{0}: {1}", String("{0} {1}", String("Buy", Null, Null, Null), String("Ability 2",
            Null, Null, Null), Null), Multiply(25, 1000), Null), Add(Value In Array(Global Variable(H), 0), Vector(0, 2, 0)), 2,
            Clip Against Surfaces, Visible To Position and String);
    }
}

rule("initialize prestige")
{
    event
    {
        Ongoing - Global;
    }

    actions
    {
        Create Effect(All Players(Team 1), Bad Aura, Red, Global Variable(I), 3.500, Visible To Position and Radius);
        Create In-World Text(All Players(Team 1), String("{0} {1} {2}", String("Start", Null, Null, Null), String("Over", Null, Null,
            Null), String("({0})", String("{0} + {1}", String("", Null, Null, Null), String("{0} {1}", 1, String("Credit", Null, Null,
            Null), Null), Null), Null, Null)), Add(Global Variable(I), Vector(0, 1.500, 0)), 2, Clip Against Surfaces,
            Visible To Position and String);
    }
}

rule("initialize enemies")
{
    event
    {
        Ongoing - Each Player;
        Team 2;
        All;
    }

    conditions
    {
        Is True For All(All Players(Team 2), Has Spawned(Current Array Element)) == True;
        Number of Players(Team 2) == 6;
    }

    actions
    {
        Teleport(Players On Hero(Hero(Roadhog), Team 2), Value In Array(Global Variable(B), 0));
        Teleport(Players On Hero(Hero(Soldier: 76), Team 2), Value In Array(Global Variable(B), 1));
        Teleport(Players On Hero(Hero(Mei), Team 2), Value In Array(Global Variable(B), 2));
        Teleport(Players On Hero(Hero(LÃºcio), Team 2), Value In Array(Global Variable(B), 3));
        Teleport(Players On Hero(Hero(Ana), Team 2), Value In Array(Global Variable(B), 4));
        Teleport(Players On Hero(Hero(Reaper), Team 2), Value In Array(Global Variable(B), 5));
        Set Status(Event Player, Null, Rooted, 9999);
        Disallow Button(Event Player, Jump);
        Disallow Button(Event Player, Crouch);
        Create In-World Text(All Players(All Teams), String("{0}: {1}", String("Heal", Null, Null, Null), Health(Event Player), Null),
            Event Player, 1, Clip Against Surfaces, Visible To Position and String);
    }
}

rule("teleport to first boss")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Has Spawned(Event Player) == True;
        True == True;
    }

    actions
    {
        Set Max Health(Event Player, Player Variable(Event Player, S));
        Teleport(Event Player, Value In Array(Global Variable(A), 0));
        Set Facing(Event Player, Vector Towards(Position Of(Event Player), Value In Array(Global Variable(B), Player Variable(Event Player,
            L))), To World);
        Preload Hero(Event Player, Hero(Soldier: 76));
    }
}

rule("RESPAWN ENEMIES")
{
    event
    {
        Player Died;
        Team 2;
        All;
    }

    actions
    {
        Respawn(Event Player);
        Wait(0.250, Ignore Condition);
        Teleport(Event Player, Value In Array(Global Variable(B), Index Of Array Value(Global Variable(D), Hero Of(Event Player))));
    }
}

rule("Shooting control")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Is Firing Primary(Event Player) == True;
    }

    actions
    {
        Set Primary Fire Enabled(Event Player, False);
        Wait(Player Variable(Event Player, E), Ignore Condition);
        Set Primary Fire Enabled(Event Player, True);
    }
}

rule("ADD COIN from boss")
{
    event
    {
        Player dealt damage;
        Team 1;
        All;
    }

    actions
    {
        Modify Player Variable(Attacker, A, Add, Round To Integer(Multiply(Player Variable(Attacker, J), Raise To Power(Event Damage, Add(
            1, Divide(Player Variable(Attacker, L), 3.500)))), Up));
    }
}

rule("boss death reward")
{
    event
    {
        Player Died;
        Team 2;
        All;
    }

    actions
    {
        Set Player Variable(Attacker, L, Max(Player Variable(Attacker, L), Add(Index Of Array Value(Global Variable(D), Hero Of(
            Event Player)), 1)));
        Modify Player Variable(Attacker, A, Add, Multiply(Raise To Power(100, Add(0.500, Divide(Player Variable(Attacker, L), 2))),
            Player Variable(Attacker, J)));
        Skip If(Compare(Player Variable(Event Player, L), <, 5), 2);
        Big Message(Event Player, String("{0} - {1}", String("{0} {1}", String("Start", Null, Null, Null), String("Over", Null, Null,
            Null), Null), String("{0} {1} {2}", String("Buy", Null, Null, Null), String("More", Null, Null, Null), String("Heroes", Null,
            Null, Null)), Null));
        Set Player Variable(Event Player, M, True);
    }
}

rule("player death")
{
    event
    {
        Player Died;
        Team 1;
        All;
    }

    actions
    {
        Respawn(Event Player);
        Set Player Variable(Event Player, F, 6);
        Wait(0.250, Ignore Condition);
        Teleport(Event Player, Global Variable(F));
    }
}

rule("portal (BOss 1 >> SHOP)")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Array Contains(Players Within Radius(Value In Array(Global Variable(E), 0), 1.500, Team 1, Surfaces), Event Player) == True;
    }

    actions
    {
        Teleport(Event Player, Global Variable(F));
        Set Player Variable(Event Player, F, 6);
        Set Player Variable(Event Player, G, Value In Array(Global Variable(A), 0));
        Set Facing(Event Player, Vector Towards(Position Of(Event Player), Subtract(Global Variable(F), Vector(0, 0.500, 8.500))),
            To World);
    }
}

rule("portal (BOss 1 >> boss 2)")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Array Contains(Players Within Radius(Value In Array(Global Variable(E), 3), 2, Team 1, Surfaces), Event Player) == True;
    }

    actions
    {
        Skip If(Compare(Player Variable(Event Player, L), >=, 1), 2);
        Big Message(Event Player, String("{0} {1} {2}", String("Go", Null, Null, Null), String("Kill", Null, Null, Null), String("Boss",
            Null, Null, Null)));
        Abort;
        Skip If(Compare(Player Variable(Event Player, A), >=, 1000), 2);
        Big Message(Event Player, String("{0} {1} {2}", String("Go", Null, Null, Null), String("Find", Null, Null, Null), String("{0} {1}",
            String("More", Null, Null, Null), String("Money", Null, Null, Null), Null)));
        Abort;
        Modify Player Variable(Event Player, A, Subtract, 1000);
        Teleport(Event Player, Value In Array(Global Variable(A), 1));
        Set Player Variable(Event Player, F, 1);
        Set Player Variable(Event Player, G, Value In Array(Global Variable(A), 1));
        Set Player Variable(Event Player, O, 1);
        Set Facing(Event Player, Vector Towards(Position Of(Event Player), Value In Array(Global Variable(B), Add(Player Variable(
            Event Player, L), 1))), To World);
    }
}

rule("portal (BOss 2 >> SHOP)")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Array Contains(Players Within Radius(Value In Array(Global Variable(E), 2), 1.500, Team 1, Surfaces), Event Player) == True;
    }

    actions
    {
        Teleport(Event Player, Global Variable(F));
        Set Player Variable(Event Player, F, 6);
        Set Player Variable(Event Player, G, Value In Array(Global Variable(A), 1));
        Set Facing(Event Player, Vector Towards(Position Of(Event Player), Subtract(Global Variable(F), Vector(0, 0.500, 8.500))),
            To World);
    }
}

rule("portal (BOss 2 >> boss 3)")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Array Contains(Players Within Radius(Value In Array(Global Variable(E), 4), 2, Team 1, Surfaces), Event Player) == True;
    }

    actions
    {
        Skip If(Compare(Player Variable(Event Player, L), >=, 2), 2);
        Big Message(Event Player, String("{0} {1} {2}", String("Go", Null, Null, Null), String("Kill", Null, Null, Null), String("Boss",
            Null, Null, Null)));
        Abort;
        Skip If(Compare(Player Variable(Event Player, A), >=, Add(10000, 2500)), 2);
        Big Message(Event Player, String("{0} {1} {2}", String("Go", Null, Null, Null), String("Find", Null, Null, Null), String("{0} {1}",
            String("More", Null, Null, Null), String("Money", Null, Null, Null), Null)));
        Abort;
        Modify Player Variable(Event Player, A, Subtract, Add(10000, 2500));
        Teleport(Event Player, Value In Array(Global Variable(A), 2));
        Set Player Variable(Event Player, F, 2);
        Set Player Variable(Event Player, G, Value In Array(Global Variable(A), 2));
        Set Player Variable(Event Player, O, 2);
        Set Facing(Event Player, Vector Towards(Position Of(Event Player), Value In Array(Global Variable(B), Add(Player Variable(
            Event Player, L), 1))), To World);
    }
}

rule("portal (BOss 3 >> SHOP)")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Array Contains(Players Within Radius(Value In Array(Global Variable(E), 5), 1.500, Team 1, Surfaces), Event Player) == True;
    }

    actions
    {
        Teleport(Event Player, Global Variable(F));
        Set Player Variable(Event Player, F, 6);
        Set Player Variable(Event Player, G, Value In Array(Global Variable(A), 2));
        Set Facing(Event Player, Vector Towards(Position Of(Event Player), Subtract(Global Variable(F), Vector(0, 0.500, 8.500))),
            To World);
    }
}

rule("portal (BOss 3 >> boss 4)")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Array Contains(Players Within Radius(Value In Array(Global Variable(E), 6), 2, Team 1, Surfaces), Event Player) == True;
    }

    actions
    {
        Skip If(Compare(Player Variable(Event Player, L), >=, 3), 2);
        Big Message(Event Player, String("{0} {1} {2}", String("Go", Null, Null, Null), String("Kill", Null, Null, Null), String("Boss",
            Null, Null, Null)));
        Abort;
        Skip If(Compare(Player Variable(Event Player, A), >=, Multiply(100, 1000)), 2);
        Big Message(Event Player, String("{0} {1} {2}", String("Go", Null, Null, Null), String("Find", Null, Null, Null), String("{0} {1}",
            String("More", Null, Null, Null), String("Money", Null, Null, Null), Null)));
        Abort;
        Modify Player Variable(Event Player, A, Subtract, Multiply(100, 1000));
        Teleport(Event Player, Value In Array(Global Variable(A), 3));
        Set Player Variable(Event Player, F, 3);
        Set Player Variable(Event Player, G, Value In Array(Global Variable(A), 3));
        Set Player Variable(Event Player, O, 3);
        Set Facing(Event Player, Vector Towards(Position Of(Event Player), Value In Array(Global Variable(B), Add(Player Variable(
            Event Player, L), 1))), To World);
    }
}

rule("portal (BOss 4 >> SHOP)")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Array Contains(Players Within Radius(Value In Array(Global Variable(E), 7), 1.500, Team 1, Surfaces), Event Player) == True;
    }

    actions
    {
        Teleport(Event Player, Global Variable(F));
        Set Player Variable(Event Player, F, 6);
        Set Player Variable(Event Player, G, Value In Array(Global Variable(A), 3));
    }
}

rule("portal (BOss 4 >> boss 5)")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Array Contains(Players Within Radius(Value In Array(Global Variable(E), 8), 2, Team 1, Surfaces), Event Player) == True;
    }

    actions
    {
        Skip If(Compare(Player Variable(Event Player, L), >=, 4), 2);
        Big Message(Event Player, String("{0} {1} {2}", String("Go", Null, Null, Null), String("Kill", Null, Null, Null), String("Boss",
            Null, Null, Null)));
        Abort;
        Skip If(Compare(Player Variable(Event Player, A), >=, Multiply(350, 1000)), 2);
        Big Message(Event Player, String("{0} {1} {2}", String("Go", Null, Null, Null), String("Find", Null, Null, Null), String("{0} {1}",
            String("More", Null, Null, Null), String("Money", Null, Null, Null), Null)));
        Abort;
        Modify Player Variable(Event Player, A, Subtract, Multiply(350, 1000));
        Teleport(Event Player, Value In Array(Global Variable(A), 4));
        Set Player Variable(Event Player, F, 4);
        Set Player Variable(Event Player, G, Value In Array(Global Variable(A), 4));
        Set Player Variable(Event Player, O, 4);
        Set Facing(Event Player, Vector Towards(Position Of(Event Player), Value In Array(Global Variable(B), Add(Player Variable(
            Event Player, L), 1))), To World);
    }
}

rule("portal (BOss 5 >> SHOP)")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Array Contains(Players Within Radius(Value In Array(Global Variable(E), 9), 1.500, Team 1, Surfaces), Event Player) == True;
    }

    actions
    {
        Teleport(Event Player, Global Variable(F));
        Set Player Variable(Event Player, F, 6);
        Set Player Variable(Event Player, G, Value In Array(Global Variable(A), 4));
    }
}

rule("portal (BOss 5 >> boss 6)")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Array Contains(Players Within Radius(Value In Array(Global Variable(E), 10), 2, Team 1, Surfaces), Event Player) == True;
    }

    actions
    {
        Skip If(Compare(Player Variable(Event Player, L), >=, 5), 2);
        Big Message(Event Player, String("{0} {1} {2}", String("Go", Null, Null, Null), String("Kill", Null, Null, Null), String("Boss",
            Null, Null, Null)));
        Abort;
        Skip If(Compare(Player Variable(Event Player, A), >=, Multiply(1500, 1000)), Absolute Value(2));
        Big Message(Event Player, String("{0} {1} {2}", String("Go", Null, Null, Null), String("Find", Null, Null, Null), String("{0} {1}",
            String("More", Null, Null, Null), String("Money", Null, Null, Null), Null)));
        Abort;
        Modify Player Variable(Event Player, A, Subtract, Multiply(1500, 1000));
        Teleport(Event Player, Value In Array(Global Variable(A), 5));
        Set Player Variable(Event Player, F, 5);
        Set Player Variable(Event Player, G, Value In Array(Global Variable(A), 5));
        Set Player Variable(Event Player, O, 5);
        Set Facing(Event Player, Vector Towards(Position Of(Event Player), Value In Array(Global Variable(B), Add(Player Variable(
            Event Player, L), 1))), To World);
    }
}

rule("portal (BOss 6 >> SHOP)")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Array Contains(Players Within Radius(Value In Array(Global Variable(E), 11), 1.500, Team 1, Surfaces), Event Player) == True;
    }

    actions
    {
        Teleport(Event Player, Global Variable(F));
        Set Player Variable(Event Player, F, 6);
        Set Player Variable(Event Player, G, Value In Array(Global Variable(A), 5));
    }
}

rule("POrtal (shop >> last_boss)")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Array Contains(Players Within Radius(Value In Array(Global Variable(E), 1), 1.500, Team 1, Surfaces), Event Player) == True;
    }

    actions
    {
        Set Player Variable(Event Player, F, Player Variable(Event Player, L));
        Teleport(Event Player, Player Variable(Event Player, G));
        Set Facing(Event Player, Vector Towards(Position Of(Event Player), Value In Array(Global Variable(B), Player Variable(Event Player,
            L))), To World);
    }
}

rule("shop heals player")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Player Variable(Event Player, F) == 6;
        Array Contains(Players Within Radius(Global Variable(F), 13, Team 1, Off), Event Player) == True;
        Compare(Health(Event Player), <, Max Health(Event Player)) == True;
    }

    actions
    {
        Start Heal Over Time(Event Player, Null, 2.500, 10000);
    }
}

rule("shop player border")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Player Variable(Event Player, F) == 6;
        Array Contains(Players Within Radius(Global Variable(F), 13, Team 1, Off), Event Player) == False;
    }

    actions
    {
        Teleport(Event Player, Global Variable(F));
    }
}

rule("boss 2 player border")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        And(Compare(Y Component Of(Position Of(Event Player)), >, 3.500), Array Contains(Players Within Radius(Value In Array(
            Global Variable(G), 0), 17, Team 1, Off), Event Player)) == False;
        Compare(Player Variable(Event Player, F), ==, 1) == True;
        Compare(Player Variable(Event Player, O), ==, 1) == True;
    }

    actions
    {
        Teleport(Event Player, Add(Value In Array(Global Variable(G), 0), Vector(0, 8, 0)));
    }
}

rule("boss 3 player border")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Compare(Player Variable(Event Player, F), ==, 2) == True;
        Compare(Player Variable(Event Player, O), ==, 2) == True;
        Array Contains(Players Within Radius(Value In Array(Global Variable(A), 2), 9, Team 1, Off), Event Player) == False;
    }

    actions
    {
        Teleport(Event Player, Value In Array(Global Variable(A), 2));
    }
}

rule("boss 4 player border")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Compare(Player Variable(Event Player, F), ==, 3) == True;
        Compare(Player Variable(Event Player, O), ==, 3) == True;
        Array Contains(Players Within Radius(Value In Array(Global Variable(G), 1), 16, Team 1, Off), Event Player) == False;
    }

    actions
    {
        Teleport(Event Player, Value In Array(Global Variable(A), 3));
    }
}

rule("buy reload speed")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Array Contains(Players Within Radius(Subtract(Global Variable(F), Vector(0, 0.500, 8.500)), 1.250, Team 1, Off), Event Player)
            == True;
        Is Button Held(Event Player, Interact) == True;
    }

    actions
    {
        Skip If(Compare(Player Variable(Event Player, A), >=, Player Variable(Event Player, H)), 2);
        Big Message(Event Player, String("{0} {1} {2}", String("Go", Null, Null, Null), String("Find", Null, Null, Null), String("{0} {1}",
            String("More", Null, Null, Null), String("Money", Null, Null, Null), Null)));
        Abort;
        Modify Player Variable(Event Player, A, Subtract, Player Variable(Event Player, H));
        Modify Player Variable(Event Player, E, Multiply, 0.950);
        Set Player Variable(Event Player, H, Round To Integer(Raise To Power(Player Variable(Event Player, H), 1.060), Up));
        Play Effect(Event Player, Good Explosion, Green, Add(Eye Position(Event Player), Facing Direction Of(Event Player)), 15);
        Play Effect(Event Player, Buff Explosion Sound, White, Eye Position(Event Player), 100);
        Wait(0.250, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule("buy damage")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Array Contains(Players Within Radius(Subtract(Global Variable(F), Vector(2.500, 0.500, 8.500)), 1.250, Team 1, Off), Event Player)
            == True;
        Is Button Held(Event Player, Interact) == True;
    }

    actions
    {
        Skip If(Compare(Player Variable(Event Player, A), >=, Player Variable(Event Player, I)), 2);
        Big Message(Event Player, String("{0} {1} {2}", String("Go", Null, Null, Null), String("Find", Null, Null, Null), String("{0} {1}",
            String("More", Null, Null, Null), String("Money", Null, Null, Null), Null)));
        Abort;
        Modify Player Variable(Event Player, A, Subtract, Player Variable(Event Player, I));
        Skip If(Compare(Player Variable(Event Player, B), <, 75), 1);
        Modify Player Variable(Event Player, B, Add, 2);
        Skip If(Compare(Player Variable(Event Player, B), >=, 75), 1);
        Modify Player Variable(Event Player, B, Add, 3);
        Set Damage Dealt(Event Player, Player Variable(Event Player, B));
        Set Player Variable(Event Player, I, Round To Integer(Raise To Power(Player Variable(Event Player, I), 1.007), Up));
        Play Effect(Event Player, Good Explosion, Green, Add(Eye Position(Event Player), Facing Direction Of(Event Player)), 15);
        Play Effect(Event Player, Buff Explosion Sound, White, Eye Position(Event Player), 100);
        Wait(0.250, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule("buy money")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Array Contains(Players Within Radius(Subtract(Global Variable(F), Vector(-2.500, 0.500, 8.500)), 1.250, Team 1, Off), Event Player)
            == True;
        Is Button Held(Event Player, Interact) == True;
    }

    actions
    {
        Skip If(Compare(Player Variable(Event Player, A), >=, Player Variable(Event Player, K)), 2);
        Big Message(Event Player, String("{0} {1} {2}", String("Go", Null, Null, Null), String("Find", Null, Null, Null), String("{0} {1}",
            String("More", Null, Null, Null), String("Money", Null, Null, Null), Null)));
        Abort;
        Modify Player Variable(Event Player, A, Subtract, Player Variable(Event Player, K));
        Modify Player Variable(Event Player, J, Add, 0.075);
        Set Player Variable(Event Player, K, Round To Integer(Raise To Power(Player Variable(Event Player, K), 1.070), Up));
        Play Effect(Event Player, Good Explosion, Green, Add(Eye Position(Event Player), Facing Direction Of(Event Player)), 15);
        Play Effect(Event Player, Buff Explosion Sound, White, Eye Position(Event Player), 100);
        Wait(0.250, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule("buy health")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Array Contains(Players Within Radius(Subtract(Global Variable(F), Vector(5, 0.500, 6.500)), 1.250, Team 1, Off), Event Player)
            == True;
        Is Button Held(Event Player, Interact) == True;
    }

    actions
    {
        Skip If(Compare(Player Variable(Event Player, A), >=, Player Variable(Event Player, P)), 2);
        Big Message(Event Player, String("{0} {1} {2}", String("Go", Null, Null, Null), String("Find", Null, Null, Null), String("{0} {1}",
            String("More", Null, Null, Null), String("Money", Null, Null, Null), Null)));
        Abort;
        Modify Player Variable(Event Player, A, Subtract, Player Variable(Event Player, P));
        Modify Player Variable(Event Player, S, Add, 5);
        Set Max Health(Event Player, Player Variable(Event Player, S));
        Set Player Variable(Event Player, P, Add(Player Variable(Event Player, P), 250));
        Play Effect(Event Player, Good Explosion, Green, Add(Eye Position(Event Player), Facing Direction Of(Event Player)), 15);
        Play Effect(Event Player, Buff Explosion Sound, White, Eye Position(Event Player), 100);
        Wait(0.250, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule("buy damage resistance")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Array Contains(Players Within Radius(Subtract(Global Variable(F), Vector(-5.000, 0.500, 6.500)), 1.250, Team 1, Off), Event Player)
            == True;
        Is Button Held(Event Player, Interact) == True;
    }

    actions
    {
        Skip If(Compare(Player Variable(Event Player, A), >=, Player Variable(Event Player, Q)), 2);
        Big Message(Event Player, String("{0} {1} {2}", String("Go", Null, Null, Null), String("Find", Null, Null, Null), String("{0} {1}",
            String("More", Null, Null, Null), String("Money", Null, Null, Null), Null)));
        Abort;
        Modify Player Variable(Event Player, A, Subtract, Player Variable(Event Player, Q));
        Set Player Variable(Event Player, R, Max(Subtract(Player Variable(Event Player, R), 2), 1));
        Set Damage Received(Event Player, Player Variable(Event Player, R));
        Set Player Variable(Event Player, Q, Round To Integer(Raise To Power(Player Variable(Event Player, Q), 1.040), Up));
        Play Effect(Event Player, Good Explosion, Green, Add(Eye Position(Event Player), Facing Direction Of(Event Player)), 15);
        Play Effect(Event Player, Buff Explosion Sound, White, Eye Position(Event Player), 100);
        Wait(0.250, Ignore Condition);
        Loop If Condition Is True;
    }
}

rule("buy ability 2")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Array Contains(Players Within Radius(Value In Array(Global Variable(H), 0), 2.500, Team 1, Off), Event Player) == True;
        Is Button Held(Event Player, Interact) == True;
        Player Variable(Event Player, T) == False;
    }

    actions
    {
        Skip If(Compare(Player Variable(Event Player, A), >=, Multiply(25, 1000)), 2);
        Big Message(Event Player, String("{0} {1} {2}", String("Go", Null, Null, Null), String("Find", Null, Null, Null), String("{0} {1}",
            String("More", Null, Null, Null), String("Money", Null, Null, Null), Null)));
        Abort;
        Modify Player Variable(Event Player, A, Subtract, Multiply(25, 1000));
        Set Ability 2 Enabled(Event Player, True);
        Set Player Variable(Event Player, T, True);
    }
}

rule("prestige")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Array Contains(Players Within Radius(Global Variable(I), 1.500, Team 1, Surfaces), Event Player) == True;
        Player Variable(Event Player, M) == True;
    }

    actions
    {
        Skip If(Compare(Player Variable(Event Player, L), >=, 6), 2);
        Big Message(Event Player, String("{0} {1} {2}", String("Go", Null, Null, Null), String("Kill", Null, Null, Null), String("Boss",
            Null, Null, Null)));
        Abort;
        Play Effect(All Players(All Teams), Debuff Impact Sound, White, Eye Position(Event Player), 100);
        Big Message(All Players(Team 1), String("{0} {1} {2}", Event Player, String("Started", Null, Null, Null), String("Over", Null,
            Null, Null)));
        Set Player Variable(Event Player, A, 0);
        Set Player Variable(Event Player, B, 1);
        Set Damage Dealt(Event Player, Player Variable(Event Player, B));
        Set Player Variable(Event Player, E, 2);
        Set Player Variable(Event Player, F, 0);
        Set Player Variable(Event Player, H, 15);
        Set Player Variable(Event Player, I, 5);
        Set Player Variable(Event Player, I, 5);
        Set Player Variable(Event Player, J, 1);
        Set Player Variable(Event Player, K, 10);
        Set Player Variable(Event Player, L, 0);
        Set Player Variable(Event Player, M, False);
        Modify Player Variable(Event Player, N, Add, 1);
        Set Player Variable(Event Player, O, 0);
        Set Player Variable(Event Player, P, 250);
        Set Player Variable(Event Player, Q, 25);
        Set Player Variable(Event Player, R, 100);
        Set Player Variable(Event Player, S, 10);
        Set Player Variable(Event Player, T, False);
        Set Player Allowed Heroes(Event Player, Hero(Soldier: 76));
        Set Max Health(Event Player, Player Variable(Event Player, S));
        Teleport(Event Player, Value In Array(Global Variable(A), 0));
        Set Facing(Event Player, Vector Towards(Position Of(Event Player), Value In Array(Global Variable(B), Player Variable(Event Player,
            L))), To World);
    }
}

rule("General (Debug)")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Is Crouching(Event Player) == True;
        False == True;
    }

    actions
    {
        Set Player Variable(Event Player, L, 5);
        Teleport(Event Player, Value In Array(Global Variable(A), 4));
    }
}

rule("magic money maker (Debug)")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        All;
    }

    conditions
    {
        Is Button Held(Event Player, Interact) == True;
        Is Button Held(Event Player, Crouch) == True;
        Is Firing Primary(Event Player) == True;
        False == True;
    }

    actions
    {
        Modify Player Variable(Event Player, A, Multiply, 10000);
        Small Message(Event Player, String("{0} {1}", String("Hacked", Null, Null, Null), String("Money", Null, Null, Null), Null));
        Set Damage Dealt(Event Player, 300);
    }
}

rule("boss 3 movement")
{
    event
    {
        Ongoing - Each Player;
        Team 2;
        Mei;
    }

    conditions
    {
        Is True For All(All Players(Team 2), Has Spawned(Current Array Element)) == True;
        Number of Players(Team 2) == 6;
    }

    actions
    {
        Wait(0.250, Ignore Condition);
        Clear Status(Event Player, Rooted);
        Set Move Speed(Event Player, 10);
    }
}

rule("boss 3 boundary")
{
    event
    {
        Ongoing - Each Player;
        Team 2;
        Mei;
    }

    conditions
    {
        Array Contains(Players Within Radius(Value In Array(Global Variable(B), 2), 10, Team 2, Off), Event Player) == False;
    }

    actions
    {
        Teleport(Event Player, Value In Array(Global Variable(B), 2));
    }
}

rule("boss 4 movement")
{
    event
    {
        Ongoing - Each Player;
        Team 2;
        LÃºcio;
    }

    conditions
    {
        Is True For All(All Players(Team 2), Has Spawned(Current Array Element)) == True;
        Number of Players(Team 2) == 6;
    }

    actions
    {
        Wait(0.250, Ignore Condition);
        Clear Status(Event Player, Rooted);
    }
}

rule("boss 4 boundary")
{
    event
    {
        Ongoing - Each Player;
        Team 2;
        LÃºcio;
    }

    conditions
    {
        Array Contains(Players Within Radius(Value In Array(Global Variable(G), 1), 16, Team 2, Off), Event Player) == False;
    }

    actions
    {
        Teleport(Event Player, Value In Array(Global Variable(B), 3));
    }
}

rule("boss 6 movement")
{
    event
    {
        Ongoing - Each Player;
        Team 2;
        Reaper;
    }

    conditions
    {
        Is True For All(All Players(Team 2), Has Spawned(Current Array Element)) == True;
        Number of Players(Team 2) == 6;
    }

    actions
    {
        Wait(0.250, Ignore Condition);
        Clear Status(Event Player, Rooted);
    }
}

rule("boss 6 boundary")
{
    event
    {
        Ongoing - Each Player;
        Team 2;
        Reaper;
    }

    conditions
    {
        Array Contains(Players Within Radius(Value In Array(Global Variable(B), 5), 20, Team 2, Off), Event Player) == False;
    }

    actions
    {
        Teleport(Event Player, Value In Array(Global Variable(B), 5));
    }
}

rule("mccree flashbang bonus")
{
    event
    {
        Ongoing - Each Player;
        Team 1;
        McCree;
    }

    conditions
    {
        Is Using Ability 2(Event Player) == True;
    }

    actions
    {
        Modify Player Variable(Event Player, A, Add, Multiply(Multiply(5000, Add(Player Variable(Event Player, L), 1)), Player Variable(
            Event Player, J)));
    }
}